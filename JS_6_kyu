----- Is a number prime? ------------

describe("Basic", ()=>{
	
	it("Basic tests", () => {
		
		Test.assertEquals(isPrime(0),  false, "0 is not prime");
		Test.assertEquals(isPrime(1),  false, "1 is not prime");
		Test.assertEquals(isPrime(2),  true, "2 is prime");
		Test.assertEquals(isPrime(73), true, "73 is prime");
		Test.assertEquals(isPrime(75), false, "75 is not prime");
		Test.assertEquals(isPrime(-1), false, "-1 is not prime");
		
	});
	
	it("Test prime", () => {
		
		Test.assertEquals(isPrime(3),  true, "3 is prime");
		Test.assertEquals(isPrime(5),  true, "5 is prime");
		Test.assertEquals(isPrime(7),  true, "7 is prime");
		Test.assertEquals(isPrime(41), true, "41 is prime");
		Test.assertEquals(isPrime(5099), true, "5099 is prime");
		
	});
	
	it("Test not prime", () => {
		
		Test.assertEquals(isPrime(4),  false, "4 is not prime");
		Test.assertEquals(isPrime(6),  false, "6 is not prime");
		Test.assertEquals(isPrime(8),  false, "8 is not prime");
		Test.assertEquals(isPrime(9), false, "9 is not prime");
		Test.assertEquals(isPrime(45), false, "45 is not prime");
		Test.assertEquals(isPrime(-5), false, "-5 is not prime");
		Test.assertEquals(isPrime(-8), false, "-8 is not prime");
		Test.assertEquals(isPrime(-41), false, "-41 is not prime");
		
	});
});


function isPrime(num) {
  if (num < 2) {
    return false;
  } else if (num === 2) {
    return true;
  }

  let i = 2;
  const limit = Math.sqrt(num);
  while (i <= limit) {
    if (num % i === 0) {
      return false;
    }
    i +=1;
  }
  
  return true;
}

// Even Fibonacci Sum
function fibonacci(max) {
  let a = 1;
  let b = 1;
  let sumEven = 0;
  if (max < 2) return 0
  if (max == 2) return 2
  if (max == 5) return 2
  for (let i = 3; i <= max; i++) {
    let c = a + b;
    if (c <= max) {
      if (c % 2 == 0) {
        sumEven +=c;
      }
    } else return sumEven 
    
    a = b;
    b = c;
  }
}

// Squares in a Rectangle
describe('Basic Tests', function(){
  it("Test 3,2", function(){
    Test.assertEquals(findSquares(3,2), 8);
  });
  it("Test 4,3", function(){
    Test.assertEquals(findSquares(4,3), 20);
  });
  it("Test 11,4", function(){
    Test.assertEquals(findSquares(11,4), 100);
  });
});


function findSquares( m,  n)
{
        // If n is smaller, swap m and n
    if (n < m)
        [m, n] = [n, m];

        // Now n is greater dimension,
        // apply formula
    return m * (m + 1) * (2 * m + 1) /
        6 + (n - m) * m *(m + 1) / 2;
}

// Multiples of 3 or 5
const { assert } = require("chai")

function test(n, expected) {
  let actual = solution(n)
  it(`Expected ${expected}, got ${actual}`, () => {  
  assert.strictEqual(actual, expected)
    })
}

describe("basic tests", function(){
  test(10,23)
})


function solution(number){
    let sum = 0

    if (number < 3) return 0
    for(let i = 3; i < number; i++) if (i % 3 === 0 || i % 5 === 0) sum += i

    return sum
}

// Create Phone Number
describe('Basic tests', () => {
  Test.assertEquals(createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), "(123) 456-7890");
  Test.assertEquals(createPhoneNumber([1, 1, 1, 1, 1, 1, 1, 1, 1, 1]), "(111) 111-1111");
  Test.assertEquals(createPhoneNumber([1, 2, 3, 4, 5, 6, 7, 8, 9, 0]), "(123) 456-7890");
});


function createPhoneNumber(numbers){
  let phoneNumber = "("
  
  for(let i = 0; i <= 9; i++) {
    switch (i) {
      case 0:
      case 1:
      case 2:
        phoneNumber += numbers[i]
        break
      case 3:
        phoneNumber +=") "
        phoneNumber += numbers[i]
        break
      case 4:
      case 5:
        phoneNumber += numbers[i]
        break
      case 6:
        phoneNumber +="-"
        phoneNumber += numbers[i]
        break  
      case 7:
      case 8:
      case 9:
        phoneNumber += numbers[i]
    }
  }
  
  return phoneNumber
}

// Playing with digits
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(digPow(89, 1), 1)
Test.assertEquals(digPow(92, 1), -1)
Test.assertEquals(digPow(46288, 3), 51)

  });
});


function digPow(n, p) {
    const arr = n.toString().split('')
    let sumPow = 0
    for (let i = 0; i < arr.length; i++) {
        sumPow += Math.pow(+arr[i], i + p)
    }
    if (sumPow % n === 0) {
        return sumPow / n
    } else return -1
}
