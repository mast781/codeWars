---------- Write out numbers -----

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(number2words(0),"zero");
Test.assertEquals(number2words(1),"one");
Test.assertEquals(number2words(8),"eight");
Test.assertEquals(number2words(10),"ten");
Test.assertEquals(number2words(19),"nineteen");
Test.assertEquals(number2words(20),"twenty");
Test.assertEquals(number2words(22),"twenty-two");
Test.assertEquals(number2words(54),"fifty-four");
Test.assertEquals(number2words(80),"eighty");
Test.assertEquals(number2words(98),"ninety-eight");
Test.assertEquals(number2words(100),"one hundred");
Test.assertEquals(number2words(301),"three hundred one");
Test.assertEquals(number2words(793),"seven hundred ninety-three");
Test.assertEquals(number2words(800),"eight hundred");
Test.assertEquals(number2words(650),"six hundred fifty");
Test.assertEquals(number2words(1000),"one thousand");
Test.assertEquals(number2words(1003),"one thousand three");

  });
});


function number2words(n){
  const baseNumbers = {
    0: 'zero',
    1: 'one',
    2: 'two',
    3: 'three',
    4: 'four',
    5: 'five',
    6: 'six',
    7: 'seven',
    8: 'eight',
    9: 'nine',
    10: 'ten',
    11: 'eleven',
    12: 'twelve',
    13: 'thirteen',
    14: 'fourteen',
    15: 'fifteen',
    16: 'sixteen',
    17: 'seventeen',
    18: 'eighteen',
    19: 'nineteen',
    20: 'twenty',
    30: 'thirty',
    40: 'forty',
    50: 'fifty',
    60: 'sixty',
    70: 'seventy',
    80: 'eighty',
    90: 'ninety',
    100: 'hundred',
    1000: 'thousand'
  };

  const first = (n, i) => String.prototype.substring.call(n, 0, i);
  const rest = (n, i) => String.prototype.substring.call(n, i);

  const calculate = (n, acceptZero = true) => {
    console.log('calculate', n);
    if (n === 0 && !acceptZero) return '';
    if (n < 100 && baseNumbers[n]) return baseNumbers[n];
    
    switch (String(n).length) {
      case 2: return tens(n);
      case 3: return aboveOneHundred(n, 1, 100);
      case 4: return aboveOneHundred(n, 1, 1000);
      case 5: return aboveOneHundred(n, 2, 1000);
      case 6: return aboveOneHundred(n, 3, 1000);
    }
  }

  const tens = (n) => {
    const v = parseInt(n, 10);
    return [
      calculate(first(v, 1)*10),
      calculate(rest(v, 1))
    ].join('-');
  }

  const aboveOneHundred = (n, i, baseNumber) => {
    const v = parseInt(n, 10);
    const tail = parseInt(rest(v, i), 10);

    return [
      calculate(first(v, i)),
      baseNumbers[baseNumber],
      calculate(tail, false)
    ].join(' ').trim();;
  }

  return calculate(n);
}

// Moving Zeros To The End
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(
  JSON.stringify(moveZeros([1,2,0,1,0,1,0,3,0,1])),
  JSON.stringify([ 1, 2, 1, 1, 3, 1, 0, 0, 0, 0 ])
);
});
});


const moveZeros = function (arr) {

    for (let i = arr.length - 1; i >= 0 ; i--) {
        if (arr[i] === 0) {
            arr.splice(i,1)
            arr.push(0)
        }
    }
    return arr;
}

// Math Issues
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(Math.round(0.4), 0, 'Math.round(0.4)');
Test.assertEquals(Math.round(0.5), 1, 'Math.round(0.5)');

Test.assertEquals(Math.ceil(0.4), 1, 'Math.ceil(0.4)');
Test.assertEquals(Math.ceil(0.5), 1, 'Math.ceil(0.5)');

Test.assertEquals(Math.floor(0.4), 0, 'Math.floor(0.4)');
Test.assertEquals(Math.floor(0.5), 0, 'Math.floor(0.5)');
  });
});


Math.round = function(number) {
  return number % 1 < 0.5 ? number - number % 1 : number - number % 1 + 1; // TODO: fix this
};

Math.ceil = function(number) {
  return number % 1 > 0 ? number - number % 1 + 1 : number; // TODO: fix this
};

Math.floor = function(number) {
  return number - number % 1; // TODO: fix this
};
