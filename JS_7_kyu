// Sum even numbers
function sumEvenNumbers(input) {
  let sum = 0;
  
  for (let i = 0; i < input.length; i++) {
    if (input[i] % 2 == 0) {
      sum += input[i]
    }
  }
  
  return sum
}

// Sum of angles
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(angle(3), 180);
    assert.strictEqual(angle(4), 360);
  });
})


function angle(n) {
    return 180 * (n - 2);
}


// Multiples!
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe('multiples', () => {
  it('fixed tests', () => {
    assert.strictEqual(multiple(30), "BangBoom")
    assert.strictEqual(multiple(3), "Bang")
    assert.strictEqual(multiple(98),"Miss")
    assert.strictEqual(multiple(65),"Boom")
    assert.strictEqual(multiple(23),"Miss")
    assert.strictEqual(multiple(15),"BangBoom")
  })
})


function multiple(x) {
  if (x % 3 == 0 && x % 5 == 0) {
    return "BangBoom"
  } else if (x % 3 == 0) {
    return "Bang"
  } else if (x % 5 == 0) {
    return "Boom"
  } else {
    return "Miss"
  }
}

// SevenAte9
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sevenAte9('165561786121789797'),'16556178612178977');
Test.assertEquals(sevenAte9('797'),'77');
Test.assertEquals(sevenAte9('7979797'),'7777');
  });
});

function sevenAte9(str){
  let arrStr = str.split('');
  let resultStr="";
  
  for(i = 0; i < arrStr.length; i++) {
    if (arrStr[i] != 9)  {
        resultStr += arrStr[i]
    } else if (arrStr[i] == 9 && i < arrStr.length && arrStr[i-1] == 7 && arrStr[i+1] == 7) {
        
    }
  }
  
  return resultStr
}

// Hello World - Without Strings
describe("Hello World with out Strings", () => {
  it("Hello, World!", () => {
    Test.assertEquals(helloWorld(), "Hello, World!");
  });
});


const helloWorld = () => {
  return String.fromCharCode(72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33)
}

// You're a square!
describe("isSquare", function(){
  it("should work for some examples", function(){
    Test.assertEquals(isSquare(-1), false, "-1: Negative numbers cannot be square numbers");
    Test.assertEquals(isSquare( 0), true, "0 is a square number (0 * 0)");
    Test.assertEquals(isSquare( 3), false, "3 is not a square number");
    Test.assertEquals(isSquare( 4), true, "4 is a square number (2 * 2)");
    Test.assertEquals(isSquare(25), true, "25 is a square number (5 * 5)");
    Test.assertEquals(isSquare(26), false, "26 is not a square number");
  });
});


let isSquare = function(n){
  return n < 0 ? false : 
         Math.sqrt(n) - Math.trunc(Math.sqrt(n)) == 0 ? true : false; // fix me
}

// Number of Divisions
describe("Your solution", function(){
  it("should work for example tests", function(){
    Test.assertEquals(divisions(6, 2), 2);
    Test.assertEquals(divisions(100, 2), 6);
    Test.assertEquals(divisions(2450, 5), 4);
    Test.assertEquals(divisions(9999, 3), 8);
    Test.assertEquals(divisions(2, 3), 0);
    Test.assertEquals(divisions(5, 5), 1);
  });
});


const divisions = (n, divisor) => {
    let countTimes = 0
    let num = n;
    for (let i = 1; i < n; i++) {
        if (num >= divisor) {
            num = Math.floor(num / divisor);
            
            countTimes++
        } else {
            return countTimes
        }
    }
};

// Grains
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Grains", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(square(1), 1);
    assert.strictEqual(square(3), 4);
    assert.strictEqual(square(4), 8);
    assert.strictEqual(square(16), 32768);
    assert.strictEqual(square(32), 2147483648);
  })
})


function square(number){
    let numberGrains = 1

    for (let i = 2; i <= number; i++) numberGrains *= 2
    return numberGrains
}

// Vowel Count
const chai = require("chai");
const assert = chai.assert;

describe("Case 1", function(){
    it ("should be defined", function(){
        assert.strictEqual(getCount("abracadabra"), 5)
    });
});


function getCount(str) {
  var vowelsCount = 0;
  
  for (let i = 0; i < str.length; i++) {
    if(/[aeiou]/.test(str[i])) vowelsCount++ 
  }
  
  return vowelsCount;
}

// Convert an array of strings to array of numbers
describe('Running toNumberArray("1.1","2.2","3.3")...', function() {
  Test.assertSimilar(toNumberArray(["1.1","2.2","3.3"]), [1.1,2.2,3.3]);
});


function toNumberArray(stringarray){
  const numberarray = [];
  stringarray.forEach(function(item, i, stringarray) {
    numberarray.push(+item)
  })
  return numberarray 
}

// Number Pairs
describe("get_larger_numbers", function() {
  it("should work for some examples", function() {
    let a = [13, 64, 15, 17, 88]
    let b = [23, 14, 53, 17, 80]
    Test.assertSimilar(getLargerNumbers(a, b), [23, 64, 53, 17, 88], `Wrong result for a = ${a}, b = ${b}`)
    a = [34, -64, 15, 17, 88]
    b = [23, 14, 53, 17, 80]
    Test.assertSimilar(getLargerNumbers(a, b), [34, 14, 53, 17, 88], `Wrong result for a = ${a}, b = ${b}`)
  });
});


function getLargerNumbers(a, b) {
  const newArray = []
  for(let i = 0; i < a.length; i++) {
    a[i] > b[i] ? newArray.push(a[i]) : newArray.push(b[i])
  }
  return newArray
}

// Sum of all the multiples of 3 or 5
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(findSum(5), 8);
Test.assertSimilar(findSum(10), 33);
  });
});


function findSum(n) {
    let sum = 0

    for(let i = 3; i <= n; i++) if (i % 3 == 0 || i % 5 == 0) sum += i
    return sum
}

// Sort arrays - 1
const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(sortme(['one', 'two', 'three' ]), ["one", "three", "two"])
   })
})


const sortme = (names) => names.sort()

// last digits of a number
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold = 0;

describe("Basic Tests", () => {
  it("d > 0", () => {
    assert.deepEqual(lastDigit(1,1),[1])
    assert.deepEqual(lastDigit(123767,4),[3,7,6,7])
    assert.deepEqual(lastDigit(0,1),[0])
    assert.deepEqual(lastDigit(34625647867585,10),[5,6,4,7,8,6,7,5,8,5])
  })
  it("d <= 0", () => {
    assert.deepEqual(lastDigit(1234,0),[])
    assert.deepEqual(lastDigit(24134,-4),[])
  })
  it("d > number of digits in n", () => {
    assert.deepEqual(lastDigit(1343,5),[1,3,4,3])
  })
})


const lastDigit = (n, d) => {
    const arrResult = []

    if (d > 0) {
        const arrDigit = (n + "").split('')

        if (d > arrDigit.length) d = arrDigit.length
        for (let i = 0; i < arrDigit.length; i++) arrResult.push(+arrDigit[i])
        return arrResult.slice(arrResult.length - d, arrResult.length)
    }
    return arrResult
}

// Round up to the next multiple of 5
const roundToNext5 = (n) => {
    for (; true; n++) if (n % 5 == 0) return n
}

// Count the divisors of a number
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getDivisorsCnt(1) , 1);
Test.assertEquals(getDivisorsCnt(10) , 4);
Test.assertEquals(getDivisorsCnt(11) , 2);
Test.assertEquals(getDivisorsCnt(54) , 8);
  });
});


const getDivisorsCnt = (n) => {
    let count = 0
    for (let i = 1; i <= n; i++) {
        if (n % i == 0) count++
    }
    return count
}

// Count the divisors of a number
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getDivisorsCnt(1) , 1);
Test.assertEquals(getDivisorsCnt(10) , 4);
Test.assertEquals(getDivisorsCnt(11) , 2);
Test.assertEquals(getDivisorsCnt(54) , 8);
  });
});

// Reverse a Number
describe("Sample tests", () =>{
  Test.assertEquals(reverseNumber(123), 321)
  Test.assertEquals(reverseNumber(-123), -321, 'Negative Numbers should be preserved')
  Test.assertEquals(reverseNumber(1000), 1, 'Should handle numbers ending with "0"')
  Test.assertEquals(reverseNumber(4321234), 4321234)
  Test.assertEquals(reverseNumber(5), 5)
  Test.assertEquals(reverseNumber(0), 0)
  Test.assertEquals(reverseNumber(98989898), 89898989)
});


function reverseNumber(n) {
  if (n >= 0) {
    return +(n + "").split("").reverse().join("")
  } else {
    n = -n
    return -(+(n + "").split("").reverse().join(""))
  }
}


function getDivisorsCnt(n) {
    let count = 0
    for (let i = 1; i <= n; i++) {
        if (n % i == 0) count++
    }
    return count
}

// Get decimal part of the given number
describe("getDecimal", function() {
  var assertFuzzyEquals = function(actual, expected, msg){
    var inrange = Math.abs((actual - expected)) <= 1e-7;
    Test.expect(inrange,
      msg || "Expected value near " + expected.toExponential(13) +
             ", but got " + actual.toExponential(13)
    );
  }
  it("returns decimal part from 10 as 0", function() {
    assertFuzzyEquals(getDecimal(10), 0);
  });

  it("returns decimal part from -1.2 as 0.2", function() {
    assertFuzzyEquals(getDecimal(-1.2), 0.2);
  });

  it("returns decimal part from 4.5 as 0.5", function() {
    assertFuzzyEquals(getDecimal(4.5), 0.5);
  });
});


const getDecimal = (n) => Math.abs(n) - Math.trunc(Math.abs(n)); 

// Power of two
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(isPowerOfTwo(2), true)
Test.assertEquals(isPowerOfTwo(4096), true)
Test.assertEquals(isPowerOfTwo(5), false)
  });
});


function isPowerOfTwo(n){
    for (let i = 1; i < n; i++) {
        if (Math.pow(2, i) == n ) {
            return true
        } else if (Math.pow(2, i) > n) {
            return false
        }
    }

}

// Perimeter sequence
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(perimeterSequence(1,3), 12)
  });
});


const perimeterSequence = (a,n) => a * 4 * n

// Two Oldest Ages
function twoOldestAges(ages){
    return ages.sort(function(a, b) {
        return a - b;
    }).slice(-2);
}

// Descending Order
function descendingOrder(n){
    return +(n + "")
        .split("")
        .sort(function(a, b) {
            return b - a;
        })
        .join("")
}

// JavaScript Array Filter
const assert = require("chai").assert;

describe("Fixed tests", () => {
    it('should return an empty array if there are no even numbers', function(){
      assert.deepEqual(getEvenNumbers([1,2,3,6,8,10]), [2,6,8,10])
      assert.deepEqual(getEvenNumbers([1,2]), [2])
      assert.deepEqual(getEvenNumbers([12,14,15]), [12,14])
      assert.deepEqual(getEvenNumbers([13,15]), [])
      assert.deepEqual(getEvenNumbers([1,3,9]), [])
    });
  })
  
  
  const getEvenNumbers=(numbersArray)=> numbersArray.filter(n => n % 2 === 0)

// Digitize
const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(digitize(123), [1,2,3])
    assert.deepEqual(digitize(1), [1])
    assert.deepEqual(digitize(0), [0])
    assert.deepEqual(digitize(1230), [1,2,3, 0])
    assert.deepEqual(digitize(8675309), [8,6,7,5,3,0,9])
    })
  })


function digitize(n) {
  n.toString().join('').map(n => +n)
}

// Hit Count
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(counterEffect("1250"), [[0,1],[0,1,2],[0,1,2,3,4,5],[0]]);
Test.assertSimilar(counterEffect("0050"), [[0],[0],[0,1,2,3,4,5],[0]]);
Test.assertSimilar(counterEffect("0000"), [[0],[0],[0],[0]]);
  });
});


function counterEffect(hitCount) {
    return hitCount.split('').map(h => {
        let newArr = []
        for (let i = 0; i <= +h; i++) {
            newArr.push(i)
        }
        return newArr
    })
}

// Hello World - Without Strings
describe("Hello World with out Strings", () => {
  it("Hello, World!", () => {
    Test.assertEquals(helloWorld(), "Hello, World!");
  });
});


const helloWorld = () => String.fromCharCode(72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33)

// Remove duplicate words
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(removeDuplicateWords('alpha beta beta gamma gamma gamma delta alpha beta beta gamma gamma gamma delta'), 'alpha beta gamma delta');
  });
});


const removeDuplicateWords = s => [...new Set(s.split(' '))].join(' ')

// Find the stray number
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(stray([1, 1, 2]), 2);
  });
});


const stray = (numbers) => {
  const [a, b] = [...new Set(numbers)];
  return numbers.indexOf(a) === numbers.lastIndexOf(a) ? a : b;
};

// Sum of Minimums!
describe("Basic tests", () => {
  it("Testing for [[7, 9, 8, 6, 2], [6, 3, 5, 4, 3], [5, 8, 7, 4, 5]]", () 
  => assert.strictEqual(sumOfMinimums([[7, 9, 8, 6, 2], [6, 3, 5, 4, 3], [5, 8, 7, 4, 5]]), 9));
  it("Testing for [[11, 12, 14, 54], [67, 89, 90, 56], [7, 9, 4, 3], [9, 8, 6, 7]]", () 
  => assert.strictEqual(sumOfMinimums([[11, 12, 14, 54], [67, 89, 90, 56], [7, 9, 4, 3], [9, 8, 6, 7]]), 76));
});


function sumOfMinimums(arr) {
  sumMin = 0
  arr.map(el => {
    sumMin += Math.min(...el)
  })
  return sumMin
}
  
// Shortest Word
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(findShort("bitcoin take over the world maybe who knows perhaps"), 3);
    assert.strictEqual(findShort("turns out random test cases are easier than writing out basic ones"), 3); 
    assert.strictEqual(findShort("Let's travel abroad shall we"), 2);
  })
})


function findShort(s){
  arr = s.split(' ')
  minLen = arr[0].length
  arr.map(el => el.length < minLen ? minLen = el.length : el)
  return minLen
}

// String ends with?
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(solution('abcde', 'cde'), true)
Test.assertEquals(solution('abcde', 'abc'), false)
});
});


const  solution = (str, ending)=> str.substr(str.length - ending.length, ending.length) === ending

// Sum of digits
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sum("3433"), "3 + 4 + 3 + 3 = 13");
Test.assertEquals(sum("64323"), "6 + 4 + 3 + 2 + 3 = 18");
Test.assertEquals(sum("8"), "8 = 8");
  });
});


function sum(digits) {
    if (digits === undefined) {
        return ''
    } else {
        const arrDigits = digits.toString().split('')
        const sumOfDigits = arrDigits.reduce((sum, current) => sum + Number(current), 0)

        return arrDigits.join(' + ') + ' = ' + sumOfDigits
    }
}

// Sum of all arguments
describe("Sample tests", () => {
  it("Small tests", () => {
    Test.assertEquals( sum(1), 1 )
    Test.assertEquals( sum(1, 2), 3 )
    Test.assertEquals( sum(5, 7, 9), 21 )
    Test.assertEquals( sum(12, 1, 1, 1, 1), 16 )
    Test.assertEquals( sum(12, 1, 1, 1, 1, 1, 1), 18 )
  })
})


function sum() {
  return [...arguments].reduce((sum, current) => sum + current, 0)
}

// Don't give me five!
describe("KataTests", function(){
  it("exampleTests", function(){
    Test.assertEquals(dontGiveMeFive(1,9), 8);
    Test.assertEquals(dontGiveMeFive(4,17), 12);
  });
});


function dontGiveMeFive(start, end)
{
    let count = 0
    for (let i = start; i <= end; i++) {
        if (!i.toString().includes('5')) {
            count++
        }
    }
    return count;
}

// Palindromes Here and There
describe("Example Tests", function() {
  it('should return [1, 1, 0, 0, 0] on [22, 303, 76, 411, 89]', function(){
      Test.assertSimilar(convertPalindromes([22, 303, 76, 411, 89]), [1, 1, 0, 0, 0]);
  });
  it('should return [0, 0, 1] on [653, 808, 5]', function(){
      Test.assertSimilar(convertPalindromes([653, 808, 5]), [0, 1, 1]);
  });
  it('should return [1, 0, 0, 1, 0, 1] on [4, 23, 441, 565, 19, 818]', function(){
      Test.assertSimilar(convertPalindromes([4, 23, 441, 565, 19, 818]), [1, 0, 0, 1, 0, 1]);
  });
});


function convertPalindromes(numbers) {
  return numbers.map(n => {
    return n.toString() === n.toString().split('').reverse().join('') ? 1 : 0
  })
};

// Sort Numbers
const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(solution([1,2,3,10,5]), [1,2,3,5,10])
    assert.deepEqual(solution(null), [])
    assert.deepEqual(solution([]), [])
    assert.deepEqual(solution([20, 2, 10]), [2,10,20])
    assert.deepEqual(solution([2, 20, 10]), [2,10,20])
  })
})


function solution(nums){
  return nums === null ? [] : nums.sort((a, b) => a - b);
}

// Jaden Casing Strings
describe("Tests", () => {
  it("test", () => {
var str = "How can mirrors be real if our eyes aren't real";
Test.assertEquals(str.toJadenCase(), "How Can Mirrors Be Real If Our Eyes Aren't Real");

  });
});


String.prototype.toJadenCase = function () {
  return this.split(' ').map(st => st[0].toUpperCase() + st.slice(1)).join(' ')
};

// Narcissistic Numbers
describe("Basic tests",() =>{
Test.assertEquals(isNarcissistic(153), true);
Test.assertEquals(isNarcissistic(1), true);
Test.assertEquals(isNarcissistic(435), false);
Test.assertEquals(isNarcissistic(370), true);
Test.assertEquals(isNarcissistic(324), false);
Test.assertEquals(isNarcissistic(371), true);
Test.assertEquals(isNarcissistic(4328), false);
Test.assertEquals(isNarcissistic(407), true);
Test.assertEquals(isNarcissistic(3248), false);
Test.assertEquals(isNarcissistic(1634), true);
Test.assertEquals(isNarcissistic(8208), true);
Test.assertEquals(isNarcissistic(9474), true);
Test.assertEquals(isNarcissistic(54748), true);
Test.assertEquals(isNarcissistic(92727), true);
Test.assertEquals(isNarcissistic(93084), true);
Test.assertEquals(isNarcissistic(548834), true);
Test.assertEquals(isNarcissistic(1741725), true);
Test.assertEquals(isNarcissistic(4210818), true);
Test.assertEquals(isNarcissistic(9800817), true);
Test.assertEquals(isNarcissistic(234229983), false);
Test.assertEquals(isNarcissistic(9926315), true);
Test.assertEquals(isNarcissistic(24678050), true);
Test.assertEquals(isNarcissistic(88593477), true);
Test.assertEquals(isNarcissistic(11513221922401), false);
Test.assertEquals(isNarcissistic(146511208), true);
Test.assertEquals(isNarcissistic(472335975), true);
Test.assertEquals(isNarcissistic(26548238692458), false);
Test.assertEquals(isNarcissistic(534494836), true);
Test.assertEquals(isNarcissistic(912985153), true);
Test.assertEquals(isNarcissistic(4679307774), true);
})


const isNarcissistic = (n) => n.toString().split('').reduce((res, current, index, arr) => res + Math.pow(Number(current), arr.length), 0) === n

// Credit Card Mask
describe("maskify", function(){
  it("should work for some examples", function(){
    Test.assertEquals(maskify('4556364607935616'), '############5616');
    Test.assertEquals(maskify('1'), '1');
    Test.assertEquals(maskify('11111'), '#1111');
  });
});


const maskify = (cc) => cc.length < 5 ? cc : '#'.repeat(cc.length - 4) + cc.slice(-4)

// Binary Addition
describe("addBinary(1,2)", function() {
  var results1 = addBinary(1,2);
  it("Should return something that isn't falsy", function() {
    Test.expect(results1, "Something is wrong, no results!");
  });
  it("Should return \"11\"", function() {
    Test.assertEquals(results1, "11");
  });
});


const addBinary = (a,b) => (a + b).toString(2)

// Isograms
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("test", () => {
    assert.strictEqual( isIsogram("Dermatoglyphics"), true );
    assert.strictEqual( isIsogram("isogram"), true );
    assert.strictEqual( isIsogram("aba"), false, "same chars may not be adjacent" );
    assert.strictEqual( isIsogram("moOse"), false, "same chars may not be same case" );
    assert.strictEqual( isIsogram("isIsogram"), false );
    assert.strictEqual( isIsogram(""), true, "an empty string is a valid isogram" );
  });
});


const isIsogram = (str) => new Set(str.toLowerCase()).size === str.length

// Sum of two lowest positive integers
const chai = require("chai");
const assert = chai.assert;

describe("Your function", function() {
  it("should work for basic tests", function() {
    assert.strictEqual(sumTwoSmallestNumbers([5, 8, 12, 19, 22]), 13 , "Sum should be 13");
    assert.strictEqual(sumTwoSmallestNumbers([15, 28, 4, 2, 43]), 6 , "Sum should be 6");
    assert.strictEqual(sumTwoSmallestNumbers([3, 87, 45, 12, 7]), 10 , "Sum should be 10");
    assert.strictEqual(sumTwoSmallestNumbers([23, 71, 33, 82, 1]), 24 , "Sum should be 24");
    assert.strictEqual(sumTwoSmallestNumbers([52, 76, 14, 12, 4]), 16 , "Sum should be 16");
  });
});  


function sumTwoSmallestNumbers(numbers) {  
  let arr = [...numbers].sort((a,b) => a - b)
  return arr[0] + arr[1]
}

// Initialize my name
describe('Static tests', function(){
  it('Initialize Names', function(){
    Test.assertEquals(initializeNames('Jack Ryan'), 'Jack Ryan','');
    Test.assertEquals(initializeNames('Lois Mary Lane'), 'Lois M. Lane','');
    Test.assertEquals(initializeNames('Dimitri'), 'Dimitri','');
    Test.assertEquals(initializeNames('Alice Betty Catherine Davis'), 'Alice B. C. Davis','');
  });
})


const initializeNames = (name) => name.split(' ').length < 3
    ? name
    : name.split(' ').map((el, index) => index > 0 && index < name.split(' ').length - 1
        ? el.slice(0, 1) + "."
        : el
    ).join(' ')

// Find all non-consecutive numbers
describe('a simple example', function() {
  const results = allNonConsecutive([1,2,3,4,6,7,8,10])
  Test.assertSimilar(results, [{i: 4, n:6}, {i: 7, n:10}])
})


function allNonConsecutive (arr) {
    const resArr = []
    if (arr.length > 1) {
        for (let i = 1; i < arr.length; i++){
            if  (arr[i] - arr[i-1] !== 1) {
                resArr.push({i: i, n: arr[i]})
            }
        }
    }
    return resArr
}
