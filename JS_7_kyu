// Sum even numbers
function sumEvenNumbers(input) {
  let sum = 0;
  
  for (let i = 0; i < input.length; i++) {
    if (input[i] % 2 == 0) {
      sum += input[i]
    }
  }
  
  return sum
}

// Sum of angles
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(angle(3), 180);
    assert.strictEqual(angle(4), 360);
  });
})


function angle(n) {
    return 180 * (n - 2);
}


// Multiples!
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe('multiples', () => {
  it('fixed tests', () => {
    assert.strictEqual(multiple(30), "BangBoom")
    assert.strictEqual(multiple(3), "Bang")
    assert.strictEqual(multiple(98),"Miss")
    assert.strictEqual(multiple(65),"Boom")
    assert.strictEqual(multiple(23),"Miss")
    assert.strictEqual(multiple(15),"BangBoom")
  })
})


function multiple(x) {
  if (x % 3 == 0 && x % 5 == 0) {
    return "BangBoom"
  } else if (x % 3 == 0) {
    return "Bang"
  } else if (x % 5 == 0) {
    return "Boom"
  } else {
    return "Miss"
  }
}

// SevenAte9
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sevenAte9('165561786121789797'),'16556178612178977');
Test.assertEquals(sevenAte9('797'),'77');
Test.assertEquals(sevenAte9('7979797'),'7777');
  });
});


function sevenAte9(str){
  let arrStr = str.split('');
  let resultStr="";
  
  for(i = 0; i < arrStr.length; i++) {
    if (arrStr[i] != 9)  {
        resultStr += arrStr[i]
    } else if (arrStr[i] == 9 && i < arrStr.length && arrStr[i-1] == 7 && arrStr[i+1] == 7) {
        
    }
  }
  
  return resultStr
}

// Hello World - Without Strings
describe("Hello World with out Strings", () => {
  it("Hello, World!", () => {
    Test.assertEquals(helloWorld(), "Hello, World!");
  });
});


const helloWorld = () => {
  return String.fromCharCode(72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33)
}

// You're a square!
describe("isSquare", function(){
  it("should work for some examples", function(){
    Test.assertEquals(isSquare(-1), false, "-1: Negative numbers cannot be square numbers");
    Test.assertEquals(isSquare( 0), true, "0 is a square number (0 * 0)");
    Test.assertEquals(isSquare( 3), false, "3 is not a square number");
    Test.assertEquals(isSquare( 4), true, "4 is a square number (2 * 2)");
    Test.assertEquals(isSquare(25), true, "25 is a square number (5 * 5)");
    Test.assertEquals(isSquare(26), false, "26 is not a square number");
  });
});


let isSquare = function(n){
  return n < 0 ? false : 
         Math.sqrt(n) - Math.trunc(Math.sqrt(n)) == 0 ? true : false; // fix me
}

// Number of Divisions
describe("Your solution", function(){
  it("should work for example tests", function(){
    Test.assertEquals(divisions(6, 2), 2);
    Test.assertEquals(divisions(100, 2), 6);
    Test.assertEquals(divisions(2450, 5), 4);
    Test.assertEquals(divisions(9999, 3), 8);
    Test.assertEquals(divisions(2, 3), 0);
    Test.assertEquals(divisions(5, 5), 1);
  });
});


const divisions = (n, divisor) => {
    let countTimes = 0
    let num = n;
    for (let i = 1; i < n; i++) {
        if (num >= divisor) {
            num = Math.floor(num / divisor);
            
            countTimes++
        } else {
            return countTimes
        }
    }
};

// Grains
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Grains", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(square(1), 1);
    assert.strictEqual(square(3), 4);
    assert.strictEqual(square(4), 8);
    assert.strictEqual(square(16), 32768);
    assert.strictEqual(square(32), 2147483648);
  })
})


function square(number){
    let numberGrains = 1

    for (let i = 2; i <= number; i++) numberGrains *= 2
    return numberGrains
}

// Vowel Count
const chai = require("chai");
const assert = chai.assert;

describe("Case 1", function(){
    it ("should be defined", function(){
        assert.strictEqual(getCount("abracadabra"), 5)
    });
});


function getCount(str) {
  var vowelsCount = 0;
  
  for (let i = 0; i < str.length; i++) {
    if(/[aeiou]/.test(str[i])) vowelsCount++ 
  }
  
  return vowelsCount;
}

// Convert an array of strings to array of numbers
describe('Running toNumberArray("1.1","2.2","3.3")...', function() {
  Test.assertSimilar(toNumberArray(["1.1","2.2","3.3"]), [1.1,2.2,3.3]);
});


function toNumberArray(stringarray){
  const numberarray = [];
  stringarray.forEach(function(item, i, stringarray) {
    numberarray.push(+item)
  })
  return numberarray 
}

// Number Pairs
describe("get_larger_numbers", function() {
  it("should work for some examples", function() {
    let a = [13, 64, 15, 17, 88]
    let b = [23, 14, 53, 17, 80]
    Test.assertSimilar(getLargerNumbers(a, b), [23, 64, 53, 17, 88], `Wrong result for a = ${a}, b = ${b}`)
    a = [34, -64, 15, 17, 88]
    b = [23, 14, 53, 17, 80]
    Test.assertSimilar(getLargerNumbers(a, b), [34, 14, 53, 17, 88], `Wrong result for a = ${a}, b = ${b}`)
  });
});


function getLargerNumbers(a, b) {
  const newArray = []
  for(let i = 0; i < a.length; i++) {
    a[i] > b[i] ? newArray.push(a[i]) : newArray.push(b[i])
  }
  return newArray
}

// Sum of all the multiples of 3 or 5
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(findSum(5), 8);
Test.assertSimilar(findSum(10), 33);
  });
});


function findSum(n) {
    let sum = 0

    for(let i = 3; i <= n; i++) if (i % 3 == 0 || i % 5 == 0) sum += i
    return sum
}

// Sort arrays - 1
const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(sortme(['one', 'two', 'three' ]), ["one", "three", "two"])
   })
})


const sortme = (names) => names.sort()

// last digits of a number
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold = 0;

describe("Basic Tests", () => {
  it("d > 0", () => {
    assert.deepEqual(lastDigit(1,1),[1])
    assert.deepEqual(lastDigit(123767,4),[3,7,6,7])
    assert.deepEqual(lastDigit(0,1),[0])
    assert.deepEqual(lastDigit(34625647867585,10),[5,6,4,7,8,6,7,5,8,5])
  })
  it("d <= 0", () => {
    assert.deepEqual(lastDigit(1234,0),[])
    assert.deepEqual(lastDigit(24134,-4),[])
  })
  it("d > number of digits in n", () => {
    assert.deepEqual(lastDigit(1343,5),[1,3,4,3])
  })
})


const lastDigit = (n, d) => {
    const arrResult = []

    if (d > 0) {
        const arrDigit = (n + "").split('')

        if (d > arrDigit.length) d = arrDigit.length
        for (let i = 0; i < arrDigit.length; i++) arrResult.push(+arrDigit[i])
        return arrResult.slice(arrResult.length - d, arrResult.length)
    }
    return arrResult
}

// Round up to the next multiple of 5
const roundToNext5 = (n) => {
    for (; true; n++) if (n % 5 == 0) return n
}

// Count the divisors of a number
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getDivisorsCnt(1) , 1);
Test.assertEquals(getDivisorsCnt(10) , 4);
Test.assertEquals(getDivisorsCnt(11) , 2);
Test.assertEquals(getDivisorsCnt(54) , 8);
  });
});


const getDivisorsCnt = (n) => {
    let count = 0
    for (let i = 1; i <= n; i++) {
        if (n % i == 0) count++
    }
    return count
}
