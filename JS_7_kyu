// Sum even numbers
function sumEvenNumbers(input) {
  let sum = 0;
  
  for (let i = 0; i < input.length; i++) {
    if (input[i] % 2 == 0) {
      sum += input[i]
    }
  }
  
  return sum
}

// Sum of angles
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(angle(3), 180);
    assert.strictEqual(angle(4), 360);
  });
})


function angle(n) {
    return 180 * (n - 2);
}


// Multiples!
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe('multiples', () => {
  it('fixed tests', () => {
    assert.strictEqual(multiple(30), "BangBoom")
    assert.strictEqual(multiple(3), "Bang")
    assert.strictEqual(multiple(98),"Miss")
    assert.strictEqual(multiple(65),"Boom")
    assert.strictEqual(multiple(23),"Miss")
    assert.strictEqual(multiple(15),"BangBoom")
  })
})


function multiple(x) {
  if (x % 3 == 0 && x % 5 == 0) {
    return "BangBoom"
  } else if (x % 3 == 0) {
    return "Bang"
  } else if (x % 5 == 0) {
    return "Boom"
  } else {
    return "Miss"
  }
}

// SevenAte9
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sevenAte9('165561786121789797'),'16556178612178977');
Test.assertEquals(sevenAte9('797'),'77');
Test.assertEquals(sevenAte9('7979797'),'7777');
  });
});


function sevenAte9(str){
  let arrStr = str.split('');
  let resultStr="";
  
  for(i = 0; i < arrStr.length; i++) {
    if (arrStr[i] != 9)  {
        resultStr += arrStr[i]
    } else if (arrStr[i] == 9 && i < arrStr.length && arrStr[i-1] == 7 && arrStr[i+1] == 7) {
        
    }
  }
  
  return resultStr
}

// Hello World - Without Strings
describe("Hello World with out Strings", () => {
  it("Hello, World!", () => {
    Test.assertEquals(helloWorld(), "Hello, World!");
  });
});


const helloWorld = () => {
  return String.fromCharCode(72, 101, 108, 108, 111, 44, 32, 87, 111, 114, 108, 100, 33)
}

// You're a square!
describe("isSquare", function(){
  it("should work for some examples", function(){
    Test.assertEquals(isSquare(-1), false, "-1: Negative numbers cannot be square numbers");
    Test.assertEquals(isSquare( 0), true, "0 is a square number (0 * 0)");
    Test.assertEquals(isSquare( 3), false, "3 is not a square number");
    Test.assertEquals(isSquare( 4), true, "4 is a square number (2 * 2)");
    Test.assertEquals(isSquare(25), true, "25 is a square number (5 * 5)");
    Test.assertEquals(isSquare(26), false, "26 is not a square number");
  });
});


let isSquare = function(n){
  return n < 0 ? false : 
         Math.sqrt(n) - Math.trunc(Math.sqrt(n)) == 0 ? true : false; // fix me
}

// Number of Divisions
describe("Your solution", function(){
  it("should work for example tests", function(){
    Test.assertEquals(divisions(6, 2), 2);
    Test.assertEquals(divisions(100, 2), 6);
    Test.assertEquals(divisions(2450, 5), 4);
    Test.assertEquals(divisions(9999, 3), 8);
    Test.assertEquals(divisions(2, 3), 0);
    Test.assertEquals(divisions(5, 5), 1);
  });
});


const divisions = (n, divisor) => {
    let countTimes = 0
    let num = n;
    for (let i = 1; i < n; i++) {
        if (num >= divisor) {
            num = Math.floor(num / divisor);
            
            countTimes++
        } else {
            return countTimes
        }
    }
};
