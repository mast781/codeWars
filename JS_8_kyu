----------------------------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("Fixed Tests", () => {
    assert.strictEqual(removeChar('eloquent'), 'loquen');
    assert.strictEqual(removeChar('country'), 'ountr');
    assert.strictEqual(removeChar('person'), 'erso');
    assert.strictEqual(removeChar('place'), 'lac');
    assert.strictEqual(removeChar('ooopsss'), 'oopss');
  });
});


function removeChar(str){
 //You got this!
  const strLength = str.length;
 return str.slice (1, strLength - 1)
};

-----------------------------------------------
---------USD => CNY---------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(usdcny(15), '101.25 Chinese Yuan');
    assert.strictEqual(usdcny(465), '3138.75 Chinese Yuan');
  });
  
  
});


function usdcny(usd) {
   return (usd * 6.75).toFixed(2) + " Chinese Yuan"
}

-------------------------------------------------
-------- Reversed sequence ----------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("reverseSeq", function() {
  it("Sample Test", function() {
    assert.deepEqual(reverseSeq(5), [5, 4, 3, 2, 1]);
  });
});


const reverseSeq = n => {
  let resultArray = [];
  for (let i=1; i <= n; i++) {
    resultArray.unshift(i)
  }
  return resultArray;
};
-----------------------------------------------
-------------Double Char-----------------------

describe("doubleChar", function() {
  it("works for some examples", function() {
    Test.assertEquals(doubleChar("abcd"), "aabbccdd");
    Test.assertEquals(doubleChar("Adidas"), "AAddiiddaass");
    Test.assertEquals(doubleChar("1337"), "11333377");
    Test.assertEquals(doubleChar("illuminati"), "iilllluummiinnaattii");
    Test.assertEquals(doubleChar("123456"), "112233445566");
    Test.assertEquals(doubleChar("%^&*("), "%%^^&&**((");
  });
});

function doubleChar(str) {
  const strLength = str.length;
  let strResult = "";
  
  for (let i = 0; i <= strLength; i++) {
     strResult += str.substr(i, 1);
     strResult += str.substr(i, 1);
  }
  return strResult;
  // Your code here
}
---------------------------------------
-----Even or Odd-----------------------

const chai = require('chai');
const assert = chai.assert;

describe("Sample tests",() => {
  
  it("2 is even", () => {
    assert.strictEqual(even_or_odd(2), "Even");
  });
  it("7 is odd", () => {
    assert.strictEqual(even_or_odd(7), "Odd");
  });
  it("-42 is even", () => {
    assert.strictEqual(even_or_odd(-42), "Even");
  });
  it("-7 is odd", () => {
    assert.strictEqual(even_or_odd(-7), "Odd");
  });
  it("0 is even", () => {
    assert.strictEqual(even_or_odd(0), "Even");
  });
});

function even_or_odd(number) {
  return number % 2 == 0 ? "Even" : "Odd"
}
--------------------------------------------
------------- Third Angle of a Triangle-----

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("test", () => {
    assert.strictEqual(otherAngle(30, 60), 90);
    assert.strictEqual(otherAngle(60, 60), 60);
    assert.strictEqual(otherAngle(43, 78), 59);
    assert.strictEqual(otherAngle(10, 20), 150);
  });
});
------------------------------------------------
----- Grasshopper - Function syntax debugging----




function otherAngle(a, b) {
  return 180 - a - b;
}
------------------------------------------------
-----------Area of a Square---------------------

describe("squareArea(2)", function() {
  Test.assertEquals(squareArea(2), 1.62);
});

describe("squareArea(0)", function() {
  Test.assertEquals(squareArea(0), 0);
});

describe("squareArea(14.05)", function() {
  Test.assertEquals(squareArea(14.05), 80);
});


function squareArea(A){
  return +Math.pow(((4 * A) / (2 * Math.PI)),2).toFixed(2)
}
--------------------------------------------------
-----------------What's the real floor?-----------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getRealFloor(1), 0);
Test.assertEquals(getRealFloor(5), 4);
Test.assertEquals(getRealFloor(15), 13);
  });
});

function getRealFloor(n) {
  if (n <= 0) n;
  if (n > 0 && n <= 12) n -= 1;
  if (n > 12) n -=2;
  
  return n;
}
-----------------------------------------
-------- Is it even? --------------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(testEven(0), true, "testEven for 0");
Test.assertEquals(testEven(0.5), false, "testEven for 0.5");
Test.assertEquals(testEven(1), false, "testEven for 1");
Test.assertEquals(testEven(2), true, "testEven for 2");
Test.assertEquals(testEven(-4), true, "testEven for 2");
  });
});

function testEven(n) {
  
  return n % 2 == 0 ? true : false
    //Your awesome code here!
}
-----------------------------------------------------------
---------- Convert a String to a Number! ------------------

describe( "stringToNumber", function(){
  it( "should work for the examples" , function(){
    Test.assertEquals(stringToNumber("1234"),1234)
    Test.assertEquals(stringToNumber("605"), 605)
    Test.assertEquals(stringToNumber("1405"),1405)
    Test.assertEquals(stringToNumber("-7"),  -7)
  });
});

var stringToNumber = function(str){
    // put your code here
  return +str;
}
---------------------------------------------------
----- String repeat -------------------------------

describe("Tests", function() {
  it ("Basic tests", function() {
    Test.assertSimilar(repeatStr(3, "*"), "***");
    Test.assertSimilar(repeatStr(5, "#"), "#####");
    Test.assertSimilar(repeatStr(2, "ha "), "ha ha ");
  });
});

function repeatStr (n, s) {
  let resultStr = "";
  
  for (let i = 1; i <= n; i++ ) {
    resultStr += s;
  }
  return resultStr;
}
----------------------------------------------
-------- Sum of positive ---------------------

const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(positiveSum([1,2,3,4,5]),15);
    assert.strictEqual(positiveSum([1,-2,3,4,5]),13);
    assert.strictEqual(positiveSum([]),0);
    assert.strictEqual(positiveSum([-1,-2,-3,-4,-5]),0);
    assert.strictEqual(positiveSum([-1,2,3,4,-5]),9);
    });
  });
  
  function positiveSum(arr) {
  let sum = 0;
  
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > 0) {
      sum += arr[i];
    }  
  }
  
  return sum;
}
-----------------------------------------------
-------- Basic variable assignment ------------

const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(name, "codewa.rs");
    })
  })
  

var a = "code";
var b = "wa.rs";
var name = a + b;
---------------------------------------------------
--------Grasshopper - Variable Assignment Debug----

describe('variable assignment', () => {
  it('should set variable a', () => {
    Test.assertEquals(a, 'dev')
  })
  it('should set variable b', () => {
    Test.assertEquals(b, 'Lab')
  })
  it('should set variable name', () => {
    Test.assertEquals(name, 'devLab')
  })
})

var a = "dev"
var b = "Lab"

var name = a + b
---------------------------------------------------
-------- Grasshopper - Basic Function Fixer -------

describe('fix add five', () => {
  it('fixed tests', () => {
    Test.assertEquals(addFive(5), 10)
    Test.assertEquals(addFive(0), 5)
    Test.assertEquals(addFive(-5), 0)
  })
})


function addFive(num) {
  var total = num + 5
  return total
}

----------------------------------------------
---- Grasshopper - Function syntax debugging---

describe("Tests", () => {
  it("test", () => {
Test.expectNoError(main)
Test.assertEquals(main('take ', 'item'), 'take item')
Test.assertEquals(main('use ', 'sword'), 'use sword')
  });
});


function main (verb, noun) {
  return verb + noun
}

------------------------------------------------
--- Grasshopper - Debug ------------------------

describe ('celsius converter', function () {
  it ('should get correct answer', function () {
    Test.assertEquals(weatherInfo(50), '10 is above freezing temperature')
    Test.assertEquals(weatherInfo(23),  '-5 is freezing temperature')
 })
})


function weatherInfo (temp) {
  var c = convertToCelsius(temp)
  if (c > 0)
    return (c + " is above freezing temperature")
  else
    return (c + " is freezing temperature")
}

function convertToCelsius (temperature) {
  var celsius = (temperature - 32) * (5/9)
  return celsius
}
---------------------------------------------------
------ Grasshopper - Debug sayHello ---------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sayHello('Mr. Spock'), 'Hello, Mr. Spock')
Test.assertEquals(sayHello('Captain Kirk'), 'Hello, Captain Kirk')
Test.assertEquals(sayHello('Liutenant Uhura'), 'Hello, Liutenant Uhura')
Test.assertEquals(sayHello('Dr. McCoy'), 'Hello, Dr. McCoy')
  });
});


function sayHello(name) {
  return 'Hello, ' + name
}
-----------------------------------
--- Remove exclamation marks ------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("test", () => {
    assert.strictEqual(removeExclamationMarks("Hello World!"), "Hello World");
  });
});


function removeExclamationMarks(s) {
  let strResult = "";
  
  for (let i = 0; i < s.length; i++) {
    if (s[i] != "!") strResult += s[i]
  }
  return strResult
}
---------------------------------------------------------------
---Exclamation marks series #1: Remove an exclamation mark from the end of string------------

describe("Basic Tests", function(){
  it("It should works for basic tests", function(){

Test.assertSimilar(remove("Hi!") , "Hi")
Test.assertSimilar(remove("Hi!!!") ,"Hi!!")
Test.assertSimilar(remove("!Hi") , "!Hi")
Test.assertSimilar(remove("!Hi!") , "!Hi")
Test.assertSimilar(remove("Hi! Hi!") , "Hi! Hi")
Test.assertSimilar(remove("Hi") , "Hi")

})})


function remove(s){
  //coding and coding....
  return s[s.length - 1] == "!" ? s.slice(0, s.length - 1) : s  
}
------------------------------------------------------------------
---- Remove all exclamation marks from the end of sentence -------

describe("Basic Tests", function(){
  it("It should works for basic tests", function(){
Test.assertSimilar(remove("Hi!") , "Hi")
Test.assertSimilar(remove("Hi!!!") ,"Hi")
Test.assertSimilar(remove("!Hi") , "!Hi")
Test.assertSimilar(remove("!Hi!") , "!Hi")
Test.assertSimilar(remove("Hi! Hi!") , "Hi! Hi")
Test.assertSimilar(remove("Hi") , "Hi")
})})


function remove(s){
  //coding and coding....
  while (true) {
    if (s[s.length - 1] == "!") {
      s = s.slice(0, s.length - 1)
    } else {
      return s
    }
  }
}
----------------------------------------------------------------------
----- Move all exclamation marks to the end of the sentence ----------

describe("Basic Tests", function(){
  it("It should works for basic tests", function(){

Test.assertSimilar(remove("Hi!") , "Hi!")
Test.assertSimilar(remove("Hi! Hi!") , "Hi Hi!!")
Test.assertSimilar(remove("Hi! Hi! Hi!") , "Hi Hi Hi!!!")
Test.assertSimilar(remove("Hi! !Hi Hi!") , "Hi Hi Hi!!!")
Test.assertSimilar(remove("Hi! Hi!! Hi!") , "Hi Hi Hi!!!!")
})})


function remove(s){
  //coding and coding....
  let strResult = ""
  let strExclamation = ""
  
  for (let i = 0; i < s.length; i++) {
    if (s[i] != "!") { 
      strResult += s[i]
    } else {
      strExclamation += s[i]
    }
    }
  return strResult + strExclamation  
}
------------------------------------------------
---- Is n divisible by x and y? ----------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Fixed Tests", () => {
    assert.strictEqual(isDivisible(3,3,4),false);
    assert.strictEqual(isDivisible(12,3,4),true);
    assert.strictEqual(isDivisible(8,3,4),false);
    assert.strictEqual(isDivisible(48,3,4),true);
  });
});


function isDivisible(n, x, y) {
  return n % x == 0 && n % y == 0 ? true : false
}
---------------------------------------------------
-- Number of Rectangles in a Grid -----------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(numberOfRectangles(4, 4), 100, "");
Test.assertEquals(numberOfRectangles(5, 5), 225, "");
  });
});


function numberOfRectangles(m, n) {
  return n*m*(n+1)*(m+1)/4;
  // Your code here!
}
-----------------------------------------------------
------- You Can't Code Under Pressure #1 ------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(doubleInteger(2), 4);
  });
});


function doubleInteger(i) {
  // i will be an integer. Double it and return it.
  return i * 2;
}
-----------------------------------------------------
----- Convert a string to an array ------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(stringToArray("Robin Singh"), ["Robin", "Singh"]);
    assert.deepEqual(stringToArray("I love arrays they are my favorite"), ["I", "love", "arrays", "they", "are", "my", "favorite"]);
  });
});


function stringToArray(string){

  return string.split(" ")
	// code code code
}
-------------------------------------------
----- Reversed Words ----------------------

describe("reverseWords",function(){
  it("should work for some examples", function(){
    Test.assertEquals(reverseWords("hello world!"), "world! hello")
    Test.assertEquals(reverseWords("yoda doesn't speak like this" ),  "this like speak doesn't yoda")
    Test.assertEquals(reverseWords("foobar"                       ),  "foobar")
    Test.assertEquals(reverseWords("kata editor"                  ),  "editor kata")
    Test.assertEquals(reverseWords("row row row your boat"        ),  "boat your row row row")
  });
});


function reverseWords(str){
  return str.split(" ").reverse().join(" "); // reverse those words
}
-------------------------------------------------------------------
----------- Reversing Words in a String ---------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(reverse('I am an expert at this'), 'this at expert an am I');
    assert.strictEqual(reverse('This is so easy'), 'easy so is This');
    assert.strictEqual(reverse('no one cares'), 'cares one no');
    assert.strictEqual(reverse(''), '');
    assert.strictEqual(reverse('CodeWars'), 'CodeWars');
  })
})


function reverse(string){
  
  arrayStr = string.split(" ").reverse().join(" ")
  
  return arrayStr
  //your code here
}
----------------------------------------------------------------------
-------- Reverse List Order ------------------------------------------

describe("reverseList", function(){
  it("should reverse some sample arrays", function(){
    Test.assertSimilar(reverseList([1,2,3,4]), [4,3,2,1]);
    Test.assertSimilar(reverseList([3,1,5,4]), [4,5,1,3]);
  });
});


function reverseList(list) {
   return list.reverse()
}
---------------------------------------------------
------ Reverse list -------------------------------

describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(reverseList([]), []);
Test.assertSimilar(reverseList([1,2,3]), [3,2,1]);
  });
});


function reverseList(arr) {
  return arr.reverse();
}
--------------------------------------------------
------ Return String of First Characters ---------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(makeString("sees eyes xray yoat"), "sexy", "Wrong result for 'sees eyes xray yoat'")
Test.assertEquals(makeString("brown eyes are nice"), "bean", "Wrong result for 'brown eyes are nice'")
Test.assertEquals(makeString("cars are very nice"), "cavn", "Wrong result for 'cars are very nice'")
Test.assertEquals(makeString("kaks de gan has a big head"), "kdghabh", "Wrong result for 'kaks de gan has a big head'")

  });
});


function makeString(s){
  arrayStr = s.split(" ")
  strResult = ""
  
  for (let i = 0; i < arrayStr.length; i++) {
     strResult += arrayStr[i].slice(0, 1)
  }
  
  return strResult
}
---------------------------------------
---Beginner Series #1 School Paperwork--

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Simple Tests", function(){
  it("Testing for fixed tests", () => {
    assert.strictEqual(paperwork(5,5), 25, 'Failed at paperwork(5, 5)');
  });
});

function paperwork(n, m) {
  if (n < 0 || m < 0) return 0
  else return n*m
}
-------------------------------------------
--- Driving School Series #1 -------------

describe("Tests", () => {
  it("test", () => {
  Test.assertEquals(passed([10,10,10,18,20,20]),12);
  Test.assertEquals(passed([21,22,24]),'No pass scores registered.');
  Test.assertEquals(passed([3,22,9,13,20,18,2,14,20,8,23,12,7,21,21,19,20,11,18,7,13,22,11,20,9]), 10);
  Test.assertEquals(passed([19,16,8,11,25,10,29,22,23]),11);
  });
});


function passed (list) { 
   let sumPoints = 0;
   let quantity = 0;
  
   for (let i = 0; i < list.length; i++) {
     if (list[i] <= 18) {
       sumPoints += list[i]
       quantity += 1
     } 
   }
  if (sumPoints == 0) return "No pass scores registered."
  return Math.round(sumPoints / quantity)
//Good luck!

} 
-------------------------------------------------------
----- Function 3 - multiplying two numbers ------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(multiply(2, 3), 6);
});
});


// Write here your multiply-function
function multiply (n1, n2) {
  return n1 * n2
}
-------------------------------------------------------
------ Multiply the number----------------------------

describe("Basic Tests",() =>{
Test.assertEquals(multiply(10),250);
Test.assertEquals(multiply(5),25);
Test.assertEquals(multiply(200),25000);
Test.assertEquals(multiply(0),0);
Test.assertEquals(multiply(-2),-10);
})


function multiply(number){
  
  degree = +(Math.abs(number) + "").length;
  
  return number * Math.pow(5, degree) 
  //your code here
}
-------------------------------------------
------- Reversed Strings ------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(solution('world'), 'dlrow');
    assert.strictEqual(solution('hello'), 'olleh');
    assert.strictEqual(solution(''), '');
    assert.strictEqual(solution('h'), 'h');
  });
}); 


function solution(str){
  return str.split("").reverse().join("");
}
-----------------------------------------------
------ Sum The Strings ------------------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sumStr("4","5"), "9");
Test.assertEquals(sumStr("34","5"), "39");
  });
});


function sumStr(a,b) {
  return +a + +b + "" 
}
----------------------------------------------
------- Sum Strings as Numbers ---------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sumStrings('123','456'),'579')
  });
});


function sumStrings(a,b) {
   return BigInt(a) + BigInt(b) + ""
}
-----------------------------------------------
------ Multiplying numbers as strings ---------

describe('Some simple multiplications', function() {
  it('simple', function() {
    Test.assertEquals(multiply("2", "3"), "6");
    Test.assertEquals(multiply("30", "69"), "2070");
    Test.assertEquals(multiply("11", "85"), "935");
  });
});

describe('Some corner case', function() {
  it('corner cases', function() {
    Test.assertEquals(multiply("2" ,"0"), "0");
    Test.assertEquals(multiply("0", "30"), "0");
    Test.assertEquals(multiply("0000001", "3"), "3");
    Test.assertEquals(multiply("1009", "03"), "3027");
  });
});

describe('Some big multiplications', function() {
  it('big boys', function() {
    Test.assertEquals(multiply("98765", "56894"), "5619135910");
    Test.assertEquals(multiply("1020303004875647366210", "2774537626200857473632627613"), "2830869077153280552556547081187254342445169156730");
    Test.assertEquals(multiply("58608473622772837728372827", "7586374672263726736374"), "444625839871840560024489175424316205566214109298");
    Test.assertEquals(multiply("9007199254740991", "9007199254740991"), "81129638414606663681390495662081");
  });
});


function multiply(a, b)
{
  return BigInt(a) * BigInt(b) + ""
}
-----------------------------------------
---- Invert values ---------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Invert array values",() => {
  it("Basic Tests", () => {
    assert.deepEqual(invert([1,2,3,4,5]), [-1,-2,-3,-4,-5]);
    assert.deepEqual(invert([1,-2,3,-4,5]), [-1,2,-3,4,-5]);
    assert.deepEqual(invert([]), []);
    assert.deepEqual(invert([0]), [-0]);
  });
});


function invert(array) {
   
  let arrayResult = [];
 
  if (array.length == 0) {
    return array;
  } else { 
    for (let i = 0; i < array.length; i++) {
      arrayResult.push(-array[i]); 
    }
  }
  return arrayResult; 
}
-------------------------------------
-- Calculate average ----------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(find_average([1,1,1]), 1);
    assert.strictEqual(find_average([1,2,3]), 2);
    assert.strictEqual(find_average([1,2,3,4]), 2.5);
  });
});


function find_average(array) {
  let sum = 0;
  
  
  for (let i = 0; i < array.length; i++) {
    sum += array[i]
  }
  
  return sum == 0 ? 0 : sum / array.length;
}

// Basic Mathematical Operation
describe("Tests", () => {
  it("test", () => {
console.log("Basic tests\n");
Test.assertSimilar(basicOp('+', 4, 7), 11);
Test.assertSimilar(basicOp('-', 15, 18), -3);
Test.assertSimilar(basicOp('*', 5, 5), 25);
Test.assertSimilar(basicOp('/', 49, 7), 7);
  });
});


function basicOp(operation, value1, value2)
{
  switch (operation) {
      case "+":
        return value1 + value2;
        break;
      case "-":
        return value1 - value2;
        break;
      case "/":
        return value1 / value2;
        break;
      case "*":
        return value1 * value2;
        break;
  }
}

// Convert a Boolean to a String
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(booleanToString(true), "true", 'When we pass in true, we want the string "true" as output');
Test.assertEquals(booleanToString(false), "false", 'When we pass in false, we want the string "false" as output');
  });
});


function booleanToString(b){
  return b === true ? "true" : "false"
}

// Area or Perimeter
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(areaOrPerimeter(4 , 4) , 16);
Test.assertEquals(areaOrPerimeter(6 , 10) , 32);
  });
});


const areaOrPerimeter = function(l , w) {
  return l == w ? l * w : (l + w) * 2
};

// This kata is about multiplying a given number by eight if it is an even number and by nine otherwise.
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic Tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(simpleMultiplication(2),16,'Should return double given argument..')
    assert.strictEqual(simpleMultiplication(1),9,'Should return double given argument..')
    assert.strictEqual(simpleMultiplication(8),64,'Should return given argument times eight...')
    assert.strictEqual(simpleMultiplication(4),32,'Should return given argument times eight...')
    assert.strictEqual(simpleMultiplication(5),45,'Should return given argument times nine...')
  });
});


function simpleMultiplication(number) {
    return number % 2 == 0 ? number *= 8 : number *= 9
}

// Can we divide it?
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("test", () => {
    assert.strictEqual(isDivideBy(-12, 2, -6), true);
    assert.strictEqual(isDivideBy(-12, 2, -5), false);
    assert.strictEqual(isDivideBy(45, 1, 6), false);
    assert.strictEqual(isDivideBy(45, 5, 15), true);
    assert.strictEqual(isDivideBy(4, 1, 4), true);
    assert.strictEqual(isDivideBy(15, -5, 3), true);
  });
});


function isDivideBy(number, a, b) {
  return number % a == 0 && number % b == 0 ? true : false
}

// Area of a Square
describe("squareArea(2)", function() {
  Test.assertEquals(squareArea(2), 1.62);
});

describe("squareArea(0)", function() {
  Test.assertEquals(squareArea(0), 0);
});

describe("squareArea(14.05)", function() {
  Test.assertEquals(squareArea(14.05), 80);
});


function squareArea(A){
    return (Math.pow(((4 * A) / (2 * Math.PI)), 2)).toFixed(2)
}


// Hello, Name or World!
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(hello('johN'), 'Hello, John!', "returns 'Hello, John!' when given 'johN'")
Test.assertSimilar(hello('alice'), 'Hello, Alice!', "returns 'Hello, Alice!' when given 'alice'")
Test.assertSimilar(hello(), 'Hello, World!', "returns 'Hello, World!' when name is not given")
Test.assertSimilar(hello(''), 'Hello, World!', "returns 'Hello, World!' when name is an empty String" )
  });
});


function hello(name) {
  if (name == undefined || name == "") return "Hello, World!"
    const nameArray = name.split('');
    let resultString = "";
    nameArray.forEach(function (item, i, nameArray) {
        if (i == 0) {
            resultString += item.toUpperCase();
        } else {
            resultString += item.toLowerCase();
        }
    });
    return "Hello, " + resultString + "!";
}

// Keep Hydrated!

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe('Fixed tests', () => {
  it('Tests', () => {
    assert.strictEqual(litres(2), 1, 'should return 1 litre');
    assert.strictEqual(litres(1.4), 0, 'should return 0 litres');
    assert.strictEqual(litres(12.3), 6, 'should return 6 litres');
    assert.strictEqual(litres(0.82), 0, 'should return 0 litres');
    assert.strictEqual(litres(11.8), 5, 'should return 5 litres');
    assert.strictEqual(litres(1787), 893, 'should return 893 litres');
    assert.strictEqual(litres(0), 0, 'should return 0 litres');
  });
});


function litres(time) {
  return Math.floor(time * 0.5);
}

// What is between?
describe("Basic tests", () => {
  it("between(1, 4)", () => assert.deepStrictEqual(between(1, 4), [1, 2, 3, 4]));
  it("between(-2, 2)", () => assert.deepStrictEqual(between(-2, 2), [-2, -1, 0, 1, 2]));
});


function between(a, b) {
  
  const arr = []
  for(let i = a; i <= b; i++) arr.push(i);
  return arr;
}

// Lario and Muigi Pipe Problem
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(pipeFix([1,2,3,5,6,8,9]),[1,2,3,4,5,6,7,8,9]);
    assert.deepEqual(pipeFix([1,2,3,12]),[1,2,3,4,5,6,7,8,9,10,11,12]);
    assert.deepEqual(pipeFix([6,9]),[6,7,8,9]);
    assert.deepEqual(pipeFix([-1,4]),[-1,0,1,2,3,4]);
    assert.deepEqual(pipeFix([1,2,3]),[1,2,3]);
  });
});


function pipeFix(numbers){
    const resultArray = []
    for (let i = numbers[0]; i <= numbers[numbers.length - 1]; i++) resultArray.push(i)
    return resultArray
}

// Drink about
const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(peopleWithAgeDrink(22), 'drink whisky');
    })
  })
  
  
function peopleWithAgeDrink(old) {
  return old < 14 ? "drink toddy" :
         old < 18 ? "drink coke" :
         old < 21 ? "drink beer" : "drink whisky"  
};

// Squash the bugs
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests",() => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(findLongest("The quick white fox jumped around the massive dog"), 7);
    assert.strictEqual(findLongest("Take me to tinseltown with you"), 10); 
    assert.strictEqual(findLongest("Sausage chops"), 7); 
    assert.strictEqual(findLongest("Wind your body and wiggle your belly"), 6); 
    assert.strictEqual(findLongest("Lets all go on holiday"), 7); 
  })
});


function findLongest(str) {

    const spl = str.split(" ");
    let longest = 0

    for (let i = 0; i < spl.length; i++) {
        if (spl[i].length > longest) {
            longest = spl[i].length
        }
    }
    return longest
}

// Count the Monkeys!
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("monkeyCount", () => {
  it("should work for fixed tests", () => {
    assert.deepEqual((monkeyCount(5)), [1, 2, 3, 4, 5]);
    assert.deepEqual((monkeyCount(3)), [1, 2, 3]);
    assert.deepEqual((monkeyCount(9)), [1, 2, 3, 4, 5, 6, 7, 8, 9]);
    assert.deepEqual((monkeyCount(10)), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]);
    assert.deepEqual((monkeyCount(20)), [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20]);
  });
});


function monkeyCount(n) {
  const arrMonkey = []
  for(let i = 1; i <= n; i++) arrMonkey.push(i)
  return arrMonkey
}

// Get the mean of an array
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getAverage([2,2,2,2]),2);
Test.assertEquals(getAverage([1,2,3,4,5,]),3);
Test.assertEquals(getAverage([1,1,1,1,1,1,1,2]),1);
  });
});


function getAverage(marks){
  let sum = 0
  
  for(let i = 0; i < marks.length; i++) sum += marks[i]
  return Math.floor (sum / marks.length)
}

// MakeUpperCase
describe("Basic Tests", function(){
  it("should pass the basic tests", function(){
    Test.assertEquals(makeUpperCase("hello"), "HELLO");
  });
});


function makeUpperCase(str) {
  return str.toUpperCase()
}

// Switch it Up!
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic Tests",() =>{
  it("Testing for fixed tests", () => {
    assert.strictEqual(switchItUp(1),"One");
    assert.strictEqual(switchItUp(3),"Three");
    assert.strictEqual(switchItUp(5),"Five");
  });
});


function switchItUp(number){
  switch (number) {
      case 0 : 
        return "Zero"
        break
      case 1 : 
        return "One"
        break
      case 2 : 
        return "Two"
        break
      case 3 : 
        return "Three"
        break
      case 4 : 
        return "Four"
        break
      case 5 : 
        return "Five"
        break
      case 6 : 
        return "Six"
        break
      case 7 : 
        return "Seven"
        break
      case 8 : 
        return "Eight"
        break
      case 9 : 
        return "Nine"
        break
    }
}

// Function 1 - hello world
const assert = require("chai").assert;

describe("Testing function", function() {
  it("Is it a function?", function() {
    assert.strictEqual(typeof greet, "function", "greet should be a function");
  });
  it("Correct return-value?", function() {
    assert.strictEqual(greet(), "hello world!");
  });
});


const greet = () => "hello world!"

// Function 2 - squaring an argument
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(square(3), 9);
});
});


const square = (arg) => Math.pow(arg, 2)

// Remove First and Last Character Part Two
const chai = require("chai");
const assert = chai.assert;

describe("Tests", () => {
  it("Should remove the first and last character", () => {
    assert.strictEqual(array('1,2,3'), '2');
    assert.strictEqual(array('1,2,3,4'), '2 3');
    assert.strictEqual(array('1,2,3,4,5'), '2 3 4');
  })
  it("Should return null if the final result is an empty string", () => {
    assert.strictEqual(array(''), null);
    assert.strictEqual(array('1'), null);
    assert.strictEqual(array('1,2'), null);
  })
});


const array = (arr) => {
    let arrResult = arr.split(',')
    if (arrResult.length > 2) {
        arrResult.shift()
        arrResult.pop()
        return arrResult.join(' ')
    } else {
        return null
    }
}

// DNA to RNA Conversion
const DNAtoRNA = (dna) => dna.replace(/[T]/gi, 'U')

// Abbreviate a Two Word Name
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(abbrevName("Sam Harris"), "S.H");
    assert.strictEqual(abbrevName("Patrick Feenan"), "P.F");
    assert.strictEqual(abbrevName("Evan Cole"), "E.C");
    assert.strictEqual(abbrevName("P Favuzzi"), "P.F");
    assert.strictEqual(abbrevName("David Mendieta"), "D.M");
  });
});


function abbrevName(name){
  const arr = name.split(" ")
  return arr[0].slice(0,1).toUpperCase() + "." + arr[1].slice(0,1).toUpperCase()
}

// Counting sheep...
describe("Tests", () => {
  it("test", () => {
var array1 = [true,  true,  true,  false,
              true,  true,  true,  true ,
              true,  false, true,  false,
              true,  false, false, true ,
              true,  true,  true,  true ,
              false, false, true,  true ];
              
Test.assertEquals(countSheeps(array1), 17, "There are 17 sheeps in total")
  });
});


function countSheeps(arrayOfSheep) {
    const arrResult = arrayOfSheep.filter(function(boolean) {
        return boolean == true;
     });
    return arrResult.length
}

// Find the Remainder
describe('Remainder Function', function(){
  it('Should handle arguments and math as defined in specificaitons', function(){
    Test.assertEquals(remainder(17,5), 2, 'Returned value should be the value left over after dividing as much as possible.');
    Test.assertEquals(remainder(13, 72), remainder(72, 13), 'The order the arguments are passed should not matter.');
    Test.expect(isNaN(remainder(1, 0)), 'Divide by zero should return NaN');
    Test.expect(isNaN(remainder(0, 0)), 'Divide by zero should return NaN');
  });
});


const remainder = (a, b) => a > b ? a % b : b % a  

// Array plus array
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => { 
  it("Testing for fixed tests", () => {
    assert.strictEqual(arrayPlusArray([1, 2, 3], [4, 5, 6]), 21);
    assert.strictEqual(arrayPlusArray([-1, -2, -3], [-4, -5, -6]), -21);
    assert.strictEqual(arrayPlusArray([0, 0, 0], [4, 5, 6]), 15);
    assert.strictEqual(arrayPlusArray([100, 200, 300], [400, 500, 600]), 2100);
  })
})


function arrayPlusArray(arr1, arr2) {
  let sumArr = 0
  for (let i = 0; i < arr1.length; i++) {
    sumArr = sumArr + arr1[i] + arr2[i] 
  }
  return sumArr; //something went wrong
}

// Volume of a Cuboid
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(Kata.getVolumeOfCuboid(1,2,2), 4);
Test.assertEquals(Kata.getVolumeOfCuboid(6.3,2,5), 63);
  });
});


class Kata {
  static getVolumeOfCuboid(length, width, height) {
    return length * width * height
  }
}

// Difference of Volumes of Cuboids
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", function(){
  it("Basic tests", function(){
    assert.strictEqual(findDifference([3, 2, 5], [1, 4, 4]), 14);
    assert.strictEqual(findDifference([9, 7, 2], [5, 2, 2]), 106);
    assert.strictEqual(findDifference([11, 2, 5], [1, 10, 8]), 30);
    assert.strictEqual(findDifference([4, 4, 7], [3, 9, 3]), 31);
    assert.strictEqual(findDifference([15, 20, 25], [10, 30, 25]), 0);
  });
});


const findDifference = (a, b) => Math.abs(a[0] * a[1] * a[2] - b[0] * b[1] * b[2])

// Generate range of integers
describe("generateRange(2, 10, 2)", function() {
  Test.assertSimilar(generateRange(2, 10, 2), [2,4,6,8,10]);
});


function generateRange(min, max, step){
  let arrResult = []
  for (let i = min; i <= max; i+=step) {
    arrResult.push(i)
  }
  return arrResult
}

// Find numbers which are divisible by given number
describe("Sample tests", function() {
  it("should pass sample tests", function() {
    Test.assertDeepEquals(divisibleBy([1,2,3,4,5,6], 2), [2,4,6]);
    Test.assertDeepEquals(divisibleBy([1,2,3,4,5,6], 3), [3,6]);
    Test.assertDeepEquals(divisibleBy([0,1,2,3,4,5,6], 4), [0,4]);
    Test.assertDeepEquals(divisibleBy([0], 4), [0]);
    Test.assertDeepEquals(divisibleBy([1,3,5], 2), []);
  })  
})


const divisibleBy = (numbers, divisor) => numbers.filter(number => number % divisor == 0)

// Power
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(numberToPower(4, 2), 16);
Test.assertEquals(numberToPower(10, 4), 10000);
Test.assertEquals(numberToPower(10, 0), 1);

  });
});


function numberToPower(number, power){
  let resPow = number
  if(power === 0) {
    return 1
  } else {
    for(let i = 1; i < power; i++) resPow *= number
  }
  return resPow
}

// Square(n) Sum
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(squareSum([1,2]), 5)
Test.assertEquals(squareSum([0, 3, 4, 5]), 50)
Test.assertEquals(squareSum([]), 0)
});
});


function squareSum(numbers){
  return numbers.reduce((sum, current) => sum + current ** 2, 0);
}

// Sum Arrays
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sum([]), 0);
Test.assertEquals(sum([1, 5.2, 4, 0, -1]), 9.2);
  });
});


const sum = (numbers) => numbers.length > 0 ? numbers.reduce((a, b) => a + b) : 0 

// Merge two sorted arrays into one
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(mergeArrays([1,2,3,4], [5,6,7,8]), [1,2,3,4,5,6,7,8], "Basic tests");
Test.assertSimilar(mergeArrays([1,3,5,7,9], [10,8,6,4,2]), [1,2,3,4,5,6,7,8,9,10], "Basic tests");
Test.assertSimilar(mergeArrays([1,3,5,7,9,11,12], [1,2,3,4,5,10,12]), [1,2,3,4,5,7,9,10,11,12], "Basic tests");
  });
});


const mergeArrays = (arr1, arr2) => [...new Set(arr1.concat(arr2).sort((a, b) => a - b))]

// Student's Final Grade
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {  
    assert.strictEqual(finalGrade(100, 12), 100);
    assert.strictEqual(finalGrade(85, 5), 90);
  });
});


function finalGrade (exam, projects) {
  if (exam > 90 || projects > 10) {
    return 100
  } else if (exam > 75 && projects >= 5) {
    return 90
  } if (exam > 50 && projects >= 2) {
    return 75
  } else {
    return 0
  }
}

// Calculate BMI
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(bmi(80, 1.80), "Normal");
  });
});


function bmi(weight, height) {
  const bmi = weight/height**2
  
  if (bmi <= 18.5) {
      return "Underweight"
  } else if (bmi <= 25.0) {
      return "Normal"
  } else if (bmi <= 30.0) {
      return "Overweight"
  } else {
    return "Obese"
  }
}

// Find Maximum and Minimum Values of a List
describe("Test", function(){
  it("Examples", function(){
    Test.assertEquals(min([-52, 56, 30, 29, -54, 0, -110]), -110);
    Test.assertEquals(min([42, 54, 65, 87, 0]), 0);
    Test.assertEquals(max([4,6,2,1,9,63,-134,566]), 566);
    Test.assertEquals(max([5]), 5);
  });
});


const min = function(list) {
    list.sort((a, b) => a - b)
    return list[0];
}

const max = function(list){
    list.sort((a, b) => b - a)
    return list[0];
}

// Is it a palindrome?
const { assert } = require('chai');

describe("Fixed tests", function() {
  it("Testing for 'a'", () => assert.strictEqual(isPalindrome("a"), true));
  it("Testing for 'aba'", () => assert.strictEqual(isPalindrome("aba"), true));
  it("Testing for 'Abba'", () => assert.strictEqual(isPalindrome("Abba"), true));
  it("Testing for 'hello'", () => assert.strictEqual(isPalindrome("hello"), false));
  it("Testing for 'Bob'", () => assert.strictEqual(isPalindrome("Bob"), true));
  it("Testing for 'Madam'", () => assert.strictEqual(isPalindrome("Madam"), true));
  it("Testing for 'AbBa'", () => assert.strictEqual(isPalindrome("AbBa"), true));
  it("Testing for ''", () => assert.strictEqual(isPalindrome(""), true));
});


const isPalindrome = (x) => x.toLowerCase() === x.toLowerCase().split('').reverse().join('')

// Sum of Multiples
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("should test", () => {
    assert.strictEqual(sumMul(0,0),"INVALID");
    assert.strictEqual(sumMul(2,9),20);
    assert.strictEqual(sumMul(4,-7),"INVALID");
  });
});


function sumMul(n,m){
 if (n < m) {
   let sum = 0
   for (let i = n; i < m; i += n) {
     sum += i
   }
   return sum
 } else {
   return 'INVALID'
 }
}

// Fundamentals: Return
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(add(1,2),3)
    assert.strictEqual(multiply(1,2),2)
    assert.strictEqual(divide(2,1),2)
    assert.strictEqual(mod(1,2),1)
    assert.strictEqual(exponent(1,2),1)
    assert.strictEqual(subt(1,2),-1)
  })
})


function add(a,b){
    return a + b
}

function divide(a,b){
    return a / b
}

function multiply(a,b){
    return a * b
}

function mod(a,b){
    return a % b
}
   
function exponent(a,b){
    return a**b
}
    
function subt(a,b){
    return a - b
}

// To square(root) or not to square(root)
describe("Solution", function(){
  it("basic tests", function(){
    var input = [ 4, 3, 9, 7, 2, 1 ];
    var expected = [ 2, 9, 3, 49, 4, 1 ];
    Test.assertSimilar(squareOrSquareRoot(input), expected);
    
    input = [ 100, 101, 5, 5, 1, 1 ];
    expected = [ 10, 10201, 25, 25, 1, 1 ];
    Test.assertSimilar(squareOrSquareRoot(input), expected);
    
    input = [ 1, 2, 3, 4, 5, 6 ];
    expected = [ 1, 4, 9, 2, 25, 36 ];
    Test.assertSimilar(squareOrSquareRoot(input), expected);
  });
});


function squareOrSquareRoot(array) {
  return array.map(el => Math.sqrt(el) % 1 === 0 ? Math.sqrt(el) : el**2)
}

// String cleaning
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(stringClean(""), "")
    assert.strictEqual(stringClean("! !"), "! !")
    assert.strictEqual(stringClean("123456789"), "")
    assert.strictEqual(stringClean("(E3at m2e2!!)"), "(Eat me!!)")
    assert.strictEqual(stringClean("Dsa32 cdsc34232 csa!!! 1I 4Am cool!"), "Dsa cdsc csa!!! I Am cool!")
    assert.strictEqual(stringClean("A1 A1! AAA   3J4K5L@!!!"), "A A! AAA   JKL@!!!")
    assert.strictEqual(stringClean("Adgre2321 A1sad! A2A3A4 fv3fdv3J544K5L@"), "Adgre Asad! AAA fvfdvJKL@")
    assert.strictEqual(stringClean("Ad2dsad3ds21 A  1$$s122ad! A2A3Ae24 f44K5L@222222 "), "Addsadds A  $$sad! AAAe fKL@ ")
    assert.strictEqual(stringClean("33333Ad2dsad3ds21 A3333  1$$s122a!d! A2!A!3Ae$24 f2##222 "), "Addsadds A  $$sa!d! A!A!Ae$ f## ")
    assert.strictEqual(stringClean("My \"me3ssy\" d8ata issues2! Will1 th4ey ever, e3ver be3 so0lved?"), "My \"messy\" data issues! Will they ever, ever be solved?")
    assert.strictEqual(stringClean("Wh7y can't we3 bu1y the goo0d software3? #cheapskates3"), "Why can't we buy the good software? #cheapskates")
  });
});


const stringClean = (s) => s.replace(/[0-9]/g,"")

// Capitalization and Mutability
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(capitalizeWord('word'), 'Word');
Test.assertSimilar(capitalizeWord('i'), 'I');
Test.assertSimilar(capitalizeWord('glasswear'), 'Glasswear');
  });
});


function capitalizeWord(word) {
  
  let newWord = word[0].toUpperCase() + word.slice(1);
  return newWord;
}

// Remove String Spaces
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests",() =>{
  it("Fixed Tests", () => {
    assert.strictEqual(noSpace('8 j 8   mBliB8g  imjB8B8  jl  B'), '8j8mBliB8gimjB8B8jlB');
    assert.strictEqual(noSpace('8 8 Bi fk8h B 8 BB8B B B  B888 c hl8 BhB fd'), '88Bifk8hB8BB8BBBB888chl8BhBfd'); 
    assert.strictEqual(noSpace('8aaaaa dddd r     '), '8aaaaaddddr'); 
  });
});


function noSpace(x){
  return x.replace(/\s/g,'')
}

// Name Shuffler
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(nameShuffler('john McClane'),'McClane john');
  });
});


function nameShuffler(str){
  return str.split(" ")[1] + " " + str.split(" ")[0]
}

// Plural
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(plural(0), true, "Plural for 0");
Test.assertEquals(plural(0.5), true, "Plural for 0.5");
Test.assertEquals(plural(1), false, "Plural for 1");
Test.assertEquals(plural(100), true, "Plural for 100");
Test.assertEquals(plural(Infinity), true, "Plural for Infinity");

  });
});


const plural = (n) => n !== 1

// Holiday VI - Shark Pontoon
describe("Example tests",() =>{
Test.assertEquals(shark(12, 50, 4, 8, true), "Alive!");
Test.assertEquals(shark(7, 55, 4, 16, true), "Alive!");
Test.assertEquals(shark(24, 0, 4, 8, true), "Shark Bait!");
});


function shark(pontoonDistance, sharkDistance, youSpeed, sharkSpeed, dolphin){
  if (dolphin) {
   sharkSpeed /= 2 
  }
  return pontoonDistance/youSpeed < sharkDistance/sharkSpeed ? "Alive!" : "Shark Bait!"
}

// How good are you really?
const chai = require('chai');
const assert = chai.assert;

describe("Example Tests", function() {
  it("betterThanAverage([2, 3], 5) should return True", function() {
    assert.strictEqual(betterThanAverage([2, 3], 5), true);
  });
  
  it("betterThanAverage([100, 40, 34, 57, 29, 72, 57, 88], 75) should return True", function() {
    assert.strictEqual(betterThanAverage([100, 40, 34, 57, 29, 72, 57, 88], 75), true);
  });
  
  it("betterThanAverage([12, 23, 34, 45, 56, 67, 78, 89, 90], 9) should return False", function() {
    assert.strictEqual(betterThanAverage([12, 23, 34, 45, 56, 67, 78, 89, 90], 9), false);
  });
  
  it("betterThanAverage([41, 75, 72, 56, 80, 82, 81, 33], 50) should return False", function() {
    assert.strictEqual(betterThanAverage([41, 75, 72, 56, 80, 82, 81, 33], 50), false);
  });
  
  it("betterThanAverage([29, 55, 74, 60, 11, 90, 67, 28], 21) should return False", function() {
    assert.strictEqual(betterThanAverage([29, 55, 74, 60, 11, 90, 67, 28], 21), false);
  });
});


function betterThanAverage(classPoints, yourPoints) {
  return (classPoints.reduce((a,b) => a + b, 0) + yourPoints)/(classPoints.length + 1) < yourPoints 
}

// Bin to Decimal
describe("Example Tests", () => {
  [ ["1",1], ["0",0], ["1001001", 73] ].forEach( ([inp, exp]) => Test.assertEquals( binToDec(inp), exp ) )
});


function binToDec(bin){
  return bin.split('').reverse().reduce((sum, current, index) => sum + Number(current) * Math.pow(2, index), 0)
}

// Cat years, Dog years
describe("Example Tests", function() {

  it("one", function() {
    Test.assertSimilar(humanYearsCatYearsDogYears(1), [1,15,15]);
  });

  it("two", function() {
    Test.assertSimilar(humanYearsCatYearsDogYears(2), [2,24,24]);
  });

  it("ten", function() {
    Test.assertSimilar(humanYearsCatYearsDogYears(10), [10,56,64]);
  });
  
  
  var humanYearsCatYearsDogYears = function(humanYears) {
  let catYears, dogYears
  if (humanYears === 1) {
    catYears = 15
    dogYears =15
  } else if (humanYears === 2) {
    catYears = 24
    dogYears = 24
  } else {
    catYears = (humanYears - 2 ) * 4 + 24
    dogYears = (humanYears - 2 ) * 5 + 24
  }
  return [humanYears,catYears,dogYears];
}

// Short Long Short
describe("Sample tests", function() {
  it("Should pass sample tests", function() {
    Test.assertEquals(solution('45', '1'), '1451');
    Test.assertEquals(solution('13', '200'), '1320013');
    Test.assertEquals(solution('Soon', 'Me'), 'MeSoonMe');
    Test.assertEquals(solution('U', 'False'), 'UFalseU');
  });
});


const solution = (a, b) => a.length > b.length ? b + a + b : a + b + a

// Define a card suit
const assert = require('chai').assert;

describe("Basic tests",() => {
  it('Testing №1 for "3♣"', () => {
    let actualClubs = defineSuit('3♣');
    assertNotPrinting(actualClubs);
    assert.strictEqual(actualClubs, 'clubs');
  });
  it('Testing №2 for "Q♠"', () => assert.strictEqual(defineSuit('Q♠'), 'spades'));
  it('Testing №3 for "9♦"', () => assert.strictEqual(defineSuit('9♦'), 'diamonds'));
  it('Testing №4 for "J♥"', () => assert.strictEqual(defineSuit('J♥'), 'hearts'));
  
  function assertNotPrinting(actual) {
    assert.isDefined(actual, 'You have to return the suit. Did you print it to the console instead?\n');
  }
});


function defineSuit(card) {
    switch (card.substr(-1,1)) {
        case '♣': return 'clubs';
        case '♦': return 'diamonds';
        case '♥': return 'hearts';
        default: return 'spades';
    }
}

// Convert number to reversed array of digits
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(digitize(35231),[1,3,2,5,3]);
    assert.deepEqual(digitize(0),[0]);
  });
});


const digitize = (n) => n.toString().split('').reverse().map(el => +el)

// Count of positives / sum of negatives
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Example tests", () => {
  it("Testing for fixed test 1", () => {
    let testData = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14, -15];
    let actual = countPositivesSumNegatives(testData);
    let expected = [10, -65];
    assert.deepEqual(actual, expected);
  })
    
  it("Testing for fixed test 1", () => {
    let testData = [0, 2, 3, 0, 5, 6, 7, 8, 9, 10, -11, -12, -13, -14];
    let actual = countPositivesSumNegatives(testData);
    let expected = [8, -50];    
    assert.deepEqual(actual, expected);
  });
});


function countPositivesSumNegatives(input) {
    let sum = 0
    let count = 0
    
    if (input != null) {
      for (let i = 0; i < input.length; i++) {
        if (input[i] > 0) {
          count ++
        } else {
          sum += input[i]
        }
      } 
    } else {
      return []
    }
   
  return count === 0 && sum === 0 ? [] : [count, sum]
}

// Find Multiples of a Number
describe("Basic Tests",() =>{
Test.assertSimilar(findMultiples(5, 25), [5, 10, 15, 20, 25])
Test.assertSimilar(findMultiples(1, 2), [1, 2])
Test.assertSimilar(findMultiples(5, 7), [5])
Test.assertSimilar(findMultiples(4, 27), [4, 8, 12, 16, 20, 24])
Test.assertSimilar(findMultiples(11, 54), [11, 22, 33, 44])
});


function findMultiples(integer, limit) {
  let arr = [];
  for (let i = integer; i <= limit; i += integer) {
    arr.push(i)
  }
  return arr
}

// Stringy Strings
describe("the stringy function", function() {

  it('Should return a string', function() {
    Test.assertEquals(typeof stringy(3), 'string',
    'Make sure it\'s a string not a number (the function is called stringy after all!)');
  });

  it('Should start with a 1', function() {
    Test.assertEquals(stringy(3)[0], '1',
    'Whoops your string doesnt start with a 1?');
  });  

  it('Should have the correct length', function() {  
    for(let i = 0; i < 10; ++i){
      let parameter = (Math.random() * 50 + 1) | 0;
      Test.assertEquals(stringy(parameter).length, parameter, 'Wrong length on ' + parameter);
    }
  });
});


function stringy(size) {
  let resStr = "";
  
  for (let i = 1; i <= Math.floor(size / 2); i++) {
    resStr += "10"
  }
  return size % 2 === 0 ? resStr : resStr + "1"
}

// Removing Elements
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests",() =>{
  it("Testing for fixed tests", () => {
    assert.deepEqual(removeEveryOther(['Hello', 'Goodbye', 'Hello Again']),['Hello', 'Hello Again']);
    assert.deepEqual(removeEveryOther([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]),[1, 3, 5, 7, 9]);
    assert.deepEqual(removeEveryOther([[1, 2]]), [[1, 2]]);
    assert.deepEqual(removeEveryOther([['Goodbye'], {'Great': 'Job'}]),[['Goodbye']]);
  })
});


const removeEveryOther = (arr) => arr.filter((el, index) => index % 2 === 0)

// Freudian translator
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(toFreud(""), "");
Test.assertSimilar(toFreud(""), "");
Test.assertSimilar(toFreud("test"), "sex");
Test.assertSimilar(toFreud("This is a test"), "sex sex sex sex" )
Test.assertSimilar(toFreud("This is a longer test"), "sex sex sex sex sex" )
Test.assertSimilar(toFreud("You're becoming a true freudian expert"), "sex sex sex sex sex sex" )
  });
});


const toFreud = (string) => string === '' ? '' : string.split(' ').map(el => 'sex').join(' ')

// Beginner - Reduce but Grow
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests",() =>{
  it("Testing for fixed tests", () => {  
    assert.strictEqual(grow([1, 2, 3]), 6);
    assert.strictEqual(grow([4, 1, 1, 1, 4]), 16); 
    assert.strictEqual(grow([2, 2, 2, 2, 2, 2]), 64); 
  });
})


const grow = (x) => x.reduce((result, current) => result * current, 1)

// Dollars and Cents
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(formatMoney(39.99), '$39.99', 'That\'s not formatted the way we expected.');
  });
});


const formatMoney = (amount) => "$" + amount.toFixed(2)

// Sum Mixed Array
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests",() =>{
  it("Testing for fixed tests", () => {
    assert.strictEqual(sumMix([9, 3, '7', '3']), 22);
    assert.strictEqual(sumMix(['5', '0', 9, 3, 2, 1, '9', 6, 7]), 42); 
    assert.strictEqual(sumMix(['3', 6, 6, 0, '5', 8, 5, '6', 2,'0']), 41); 
  })
});


const sumMix = (x) => x.reduce((sum, current) => sum + Number(current),0)

// Find the first non-consecutive number
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Fixed tests", () => {
  it('a simple example', function() {
    const first = firstNonConsecutive([1,2,3,4,6,7,8])
    assert.strictEqual(first, 6)
  })
})


function firstNonConsecutive (arr) {
  for (let i = 1; i < arr.length; i++){
    if  (arr[i] - arr[i-1] !== 1) {
      return arr[i]
    }
  } 
  return null
}

// Fake Binary
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests",() =>{
  it("Testing for fixed tests", () => {
    assert.strictEqual(fakeBin('45385593107843568'), '01011110001100111');
    assert.strictEqual(fakeBin('509321967506747'), '101000111101101'); 
    assert.strictEqual(fakeBin('366058562030849490134388085'), '011011110000101010000011011');
  })
});


const fakeBin = (x) => x.split('').map(el => el < 5 ? 0 : 1).join('')

// Add new item (collections are passed by reference)
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(addExtra([1,2,3]).length, 4)
Test.assertEquals(addExtra([1,2]).length, 3)
Test.assertEquals(addExtra([]).length, 1)

var arr = [1,2,3];
Test.assertNotEquals(addExtra(arr),arr, "Description: ...You have to create a new list..." )

  });
});


function addExtra( listOfNumbers ){
    let newArr = [...listOfNumbers]
    newArr.push(13)
    return newArr
}

// get character from ASCII Value
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getChar(55),'7')
Test.assertEquals(getChar(56),'8')
Test.assertEquals(getChar(57),'9')
Test.assertEquals(getChar(58),':')
Test.assertEquals(getChar(59),';')
Test.assertEquals(getChar(60),'<')
Test.assertEquals(getChar(61),'=')
Test.assertEquals(getChar(62),'>')
Test.assertEquals(getChar(63),'?')
Test.assertEquals(getChar(64),'@')
Test.assertEquals(getChar(65),'A')
  });
});


function getChar(c){
  return String.fromCharCode(c)
}

// ASCII Total
const strictEqual = require('chai').assert.strictEqual;

function doTest (string, expected) {
  const actual = uniTotal(string);
  strictEqual(actual, expected, `for string "${string}":\n`);
}

it("sample tests", () => {
  doTest("", 0);
  doTest("a", 97);
  doTest("b", 98);
  doTest("c", 99);
  doTest("d", 100);
  doTest("e", 101);
  doTest("aaa", 291);
  doTest("Mary Had A Little Lamb", 1873);
});


function uniTotal (string) {
   return string.split('').reduce((sum, current) => sum + current.charCodeAt(),0)
}

// Hex to Decimal
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(hexToDec("1"), 1);
    assert.strictEqual(hexToDec("a"), 10);
    assert.strictEqual(hexToDec("10"), 16);
    assert.strictEqual(hexToDec("FF"), 255);
    assert.strictEqual(hexToDec("-C"), -12);
  })
})


const hexToDec = (hexString) => parseInt(hexString,16)

// Is he gonna survive?
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe('Fixed tests', function() {
  it("Testing for fixed tests", () => {
    assert.strictEqual(hero(10, 5), true);
    assert.strictEqual(hero(7, 4), false);
    assert.strictEqual(hero(4, 5), false);
    assert.strictEqual(hero(100, 40), true);
    assert.strictEqual(hero(1500, 751), false);
    assert.strictEqual(hero(0, 1), false);
  });
});


const hero = (bullets, dragons) => bullets >= dragons * 2

// Transportation on vacation
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Regular Tests:", function() {
  it("Should work for under 3 days:", function() {
    assert.strictEqual(rentalCarCost(1), 40);
    assert.strictEqual(rentalCarCost(2), 80);
  });
  
  it("Should work for under 7 days:", function() {
    assert.strictEqual(rentalCarCost(3), 100);
    assert.strictEqual(rentalCarCost(4), 140);
    assert.strictEqual(rentalCarCost(5), 180);
    assert.strictEqual(rentalCarCost(6), 220);
  });
  
  it("Should work for 7 or more days:", function() {
    assert.strictEqual(rentalCarCost(7), 230);
    assert.strictEqual(rentalCarCost(8), 270);
    assert.strictEqual(rentalCarCost(9), 310);
    assert.strictEqual(rentalCarCost(10), 350);    
  });
});


function rentalCarCost(d) {
  return d < 3 ? d * 40
        : d >= 3 && d < 7 ? d * 40 - 20
        : d * 40 - 50
}

// Remove duplicates from list
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(distinct([1]), [1]);
Test.assertSimilar(distinct([1,2]), [1,2]);
Test.assertSimilar(distinct([1,1,2]), [1,2]);
  });
});


const distinct = (a) => Array.from(new Set(a))

// Multiple of index
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold = 0;

describe("Basic tests",() => {
  it("Test", () => {
    assert.deepEqual(multipleOfIndex([22, -6, 32, 82, 9, 25]), [-6, 32, 25]);
    assert.deepEqual(multipleOfIndex([68, -1, 1, -7, 10, 10]), [-1, 10]);
    assert.deepEqual(multipleOfIndex([11, -11]), [-11]);
    assert.deepEqual(multipleOfIndex([-56,-85,72,-26,-14,76,-27,72,35,-21,-67,87,0,21,59,27,-92,68]), [-85, 72, 0, 68]);
    assert.deepEqual(multipleOfIndex([28,38,-44,-99,-13,-54,77,-51]), [38, -44, -99]);
    assert.deepEqual(multipleOfIndex([-1,-49,-1,67,8,-60,39,35]), [-49, 8, -60, 35]);
  })
});


function multipleOfIndex(array) {
  return array.filter((el,index) => el % index === 0);
}

// Count by X
const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic Tests",function(){
  it("Testing for fixed tests", () => {
    assert.deepEqual(countBy(1,10), [1,2,3,4,5,6,7,8,9,10], "Array does not match")
    assert.deepEqual(countBy(2,5), [2,4,6,8,10], "Array does not match")
  });
});


function countBy(x, n) {
    let z = [];
    for (let i = 1; i <= n; i++) {
            z.push(i * x)
    }
    return z;
}

// Get number from string
describe("Basic tests", function() {
  it("should work as expected", function() {
    Test.assertSimilar(getNumberFromString("1"), 1);
    Test.assertSimilar(getNumberFromString("123"), 123);
    Test.assertSimilar(getNumberFromString("this is number: 7"), 7);
  });
});


function getNumberFromString(s) {
    return Number(s.replace(/[^\d]/g, ''))
}

// Training JS #16: Methods of String object--slice(), substring() and substr()
describe("Tests", () => {
  it("test", () => {
    Test.assertSimilar(cutIt(["ab","cde","fgh"]) , ["ab","cd","fg"]);
    Test.assertSimilar(cutIt(["abc","defgh","ijklmn"]) , ["abc","def","ijk"]);
    Test.assertSimilar(cutIt(["codewars","javascript","java"]) , ["code","java","java"]);

  });
});


function cutIt(arr){
  const min = Math.min(...arr.map(el => el.length))
  return arr.map(el => el.slice(0, min))
}

// Add Length
describe("Tests", () => {
  it("test", () => {
Test.assertSimilar(addLength('apple ban'),["apple 5", "ban 3"]);
Test.assertSimilar(addLength('you will win'),["you 3", "will 4", "win 3"]);
  });
});


const addLength = (str) => str.split(' ').map(s => s + " " + s.length)

// Find the position!
describe("Tests", () => {
  it("test", () => {
Test.assertEquals(position("a"),"Position of alphabet: 1");
Test.assertEquals(position("z"),"Position of alphabet: 26");
Test.assertEquals(position("e"),"Position of alphabet: 5");
  });
});


function position(letter){
  const alphabet = 'abcdefghijklmnopqrstuvwxyz'
  return "Position of alphabet: " + (alphabet.indexOf(letter) + 1)
}

// Training JS #4: Basic data types--Array
describe("Tests", () => {
  it("test", () => {
    Test.assertSimilar(getLength([1,2,3]),3);
    Test.assertSimilar(getFirst([1,2,3]),1);
    Test.assertSimilar(getLast([1,2,3]),3);
    Test.assertSimilar(pushElement([1,2,3]).length,4);
    Test.assertSimilar(popElement([1,2,3]).length,2);
  });
});


function getLength(arr){
  //return length of arr
  return arr.length
}
function getFirst(arr){
  //return the first element of arr
  return arr[0]
}
function getLast(arr){
  //return the last element of arr
  return arr[arr.length - 1]
}
function pushElement(arr){
  var el=1;
  //push el to arr
  arr.push(el)
  return arr
}
function popElement(arr){
  //pop an element from arr
  arr.pop()
  return arr
}

// Training JS #3: Basic data types--String
describe("Tests", () => {
  it("test", () => {
    Test.assertSimilar(Dad(),"Dad");
    Test.assertSimilar(Bee(),"Bee");
    Test.assertSimilar(banana(),"banana");
  });
});


var a1="A",a2="a",b1="B",b2="b",c1="C",c2="c",d1="D",d2="d",e1="E",e2="e",n1="N",n2="n"
function Dad(){
  //select some variable to combine "Dad"
  return d1 + a2 + d2;
}
function Bee(){
  //select some variable to combine "Bee"
  return b1 + e2 + e2;
}
function banana(){
  //select some variable to combine "banana"
  return b2 + a2 + n2 + a2 + n2 + a2;
}

//answer some questions if you finished works above
function answer1(){
  //the answer should be "yes" or "no"
  return "no";
}
function answer2(){
  //the answer should be "yes" or "no"
  return "no";
}
function answer3(){
  //the answer should be "yes" or "no"
  return "yes";
}
