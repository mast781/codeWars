----------------------------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("Fixed Tests", () => {
    assert.strictEqual(removeChar('eloquent'), 'loquen');
    assert.strictEqual(removeChar('country'), 'ountr');
    assert.strictEqual(removeChar('person'), 'erso');
    assert.strictEqual(removeChar('place'), 'lac');
    assert.strictEqual(removeChar('ooopsss'), 'oopss');
  });
});


function removeChar(str){
 //You got this!
  const strLength = str.length;
 return str.slice (1, strLength - 1)
};

-----------------------------------------------
---------USD => CNY---------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(usdcny(15), '101.25 Chinese Yuan');
    assert.strictEqual(usdcny(465), '3138.75 Chinese Yuan');
  });
});


function usdcny(usd) {
   return (usd * 6.75).toFixed(2) + " Chinese Yuan"
}

-------------------------------------------------
-------- Reversed sequence ----------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("reverseSeq", function() {
  it("Sample Test", function() {
    assert.deepEqual(reverseSeq(5), [5, 4, 3, 2, 1]);
  });
});


const reverseSeq = n => {
  let resultArray = [];
  for (let i=1; i <= n; i++) {
    resultArray.unshift(i)
  }
  return resultArray;
};
-----------------------------------------------
-------------Double Char-----------------------

describe("doubleChar", function() {
  it("works for some examples", function() {
    Test.assertEquals(doubleChar("abcd"), "aabbccdd");
    Test.assertEquals(doubleChar("Adidas"), "AAddiiddaass");
    Test.assertEquals(doubleChar("1337"), "11333377");
    Test.assertEquals(doubleChar("illuminati"), "iilllluummiinnaattii");
    Test.assertEquals(doubleChar("123456"), "112233445566");
    Test.assertEquals(doubleChar("%^&*("), "%%^^&&**((");
  });
});

function doubleChar(str) {
  const strLength = str.length;
  let strResult = "";
  
  for (let i = 0; i <= strLength; i++) {
     strResult += str.substr(i, 1);
     strResult += str.substr(i, 1);
  }
  return strResult;
  // Your code here
}
---------------------------------------
-----Even or Odd-----------------------

const chai = require('chai');
const assert = chai.assert;

describe("Sample tests",() => {
  
  it("2 is even", () => {
    assert.strictEqual(even_or_odd(2), "Even");
  });
  it("7 is odd", () => {
    assert.strictEqual(even_or_odd(7), "Odd");
  });
  it("-42 is even", () => {
    assert.strictEqual(even_or_odd(-42), "Even");
  });
  it("-7 is odd", () => {
    assert.strictEqual(even_or_odd(-7), "Odd");
  });
  it("0 is even", () => {
    assert.strictEqual(even_or_odd(0), "Even");
  });
});

function even_or_odd(number) {
  return number % 2 == 0 ? "Even" : "Odd"
}
--------------------------------------------
------------- Third Angle of a Triangle-----

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("test", () => {
    assert.strictEqual(otherAngle(30, 60), 90);
    assert.strictEqual(otherAngle(60, 60), 60);
    assert.strictEqual(otherAngle(43, 78), 59);
    assert.strictEqual(otherAngle(10, 20), 150);
  });
});
------------------------------------------------
----- Grasshopper - Function syntax debugging----




function otherAngle(a, b) {
  return 180 - a - b;
}
------------------------------------------------
-----------Area of a Square---------------------

describe("squareArea(2)", function() {
  Test.assertEquals(squareArea(2), 1.62);
});

describe("squareArea(0)", function() {
  Test.assertEquals(squareArea(0), 0);
});

describe("squareArea(14.05)", function() {
  Test.assertEquals(squareArea(14.05), 80);
});


function squareArea(A){
  return +Math.pow(((4 * A) / (2 * Math.PI)),2).toFixed(2)
}
--------------------------------------------------
-----------------What's the real floor?-----------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getRealFloor(1), 0);
Test.assertEquals(getRealFloor(5), 4);
Test.assertEquals(getRealFloor(15), 13);
  });
});

function getRealFloor(n) {
  if (n <= 0) n;
  if (n > 0 && n <= 12) n -= 1;
  if (n > 12) n -=2;
  
  return n;
}
-----------------------------------------
-------- Is it even? --------------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(testEven(0), true, "testEven for 0");
Test.assertEquals(testEven(0.5), false, "testEven for 0.5");
Test.assertEquals(testEven(1), false, "testEven for 1");
Test.assertEquals(testEven(2), true, "testEven for 2");
Test.assertEquals(testEven(-4), true, "testEven for 2");
  });
});

function testEven(n) {
  
  return n % 2 == 0 ? true : false
    //Your awesome code here!
}
-----------------------------------------------------------
---------- Convert a String to a Number! ------------------

describe( "stringToNumber", function(){
  it( "should work for the examples" , function(){
    Test.assertEquals(stringToNumber("1234"),1234)
    Test.assertEquals(stringToNumber("605"), 605)
    Test.assertEquals(stringToNumber("1405"),1405)
    Test.assertEquals(stringToNumber("-7"),  -7)
  });
});

var stringToNumber = function(str){
    // put your code here
  return +str;
}
---------------------------------------------------
----- String repeat -------------------------------

describe("Tests", function() {
  it ("Basic tests", function() {
    Test.assertSimilar(repeatStr(3, "*"), "***");
    Test.assertSimilar(repeatStr(5, "#"), "#####");
    Test.assertSimilar(repeatStr(2, "ha "), "ha ha ");
  });
});

function repeatStr (n, s) {
  let resultStr = "";
  
  for (let i = 1; i <= n; i++ ) {
    resultStr += s;
  }
  return resultStr;
}
----------------------------------------------
-------- Sum of positive ---------------------

const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(positiveSum([1,2,3,4,5]),15);
    assert.strictEqual(positiveSum([1,-2,3,4,5]),13);
    assert.strictEqual(positiveSum([]),0);
    assert.strictEqual(positiveSum([-1,-2,-3,-4,-5]),0);
    assert.strictEqual(positiveSum([-1,2,3,4,-5]),9);
    });
  });
  
  function positiveSum(arr) {
  let sum = 0;
  
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] > 0) {
      sum += arr[i];
    }  
  }
  
  return sum;
}
-----------------------------------------------
-------- Basic variable assignment ------------

const { assert } = require("chai")

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(name, "codewa.rs");
    })
  })
  

var a = "code";
var b = "wa.rs";
var name = a + b;
---------------------------------------------------
--------Grasshopper - Variable Assignment Debug----

describe('variable assignment', () => {
  it('should set variable a', () => {
    Test.assertEquals(a, 'dev')
  })
  it('should set variable b', () => {
    Test.assertEquals(b, 'Lab')
  })
  it('should set variable name', () => {
    Test.assertEquals(name, 'devLab')
  })
})

var a = "dev"
var b = "Lab"

var name = a + b
---------------------------------------------------
-------- Grasshopper - Basic Function Fixer -------

describe('fix add five', () => {
  it('fixed tests', () => {
    Test.assertEquals(addFive(5), 10)
    Test.assertEquals(addFive(0), 5)
    Test.assertEquals(addFive(-5), 0)
  })
})


function addFive(num) {
  var total = num + 5
  return total
}

----------------------------------------------
---- Grasshopper - Function syntax debugging---

describe("Tests", () => {
  it("test", () => {
Test.expectNoError(main)
Test.assertEquals(main('take ', 'item'), 'take item')
Test.assertEquals(main('use ', 'sword'), 'use sword')
  });
});


function main (verb, noun) {
  return verb + noun
}

------------------------------------------------
--- Grasshopper - Debug ------------------------

describe ('celsius converter', function () {
  it ('should get correct answer', function () {
    Test.assertEquals(weatherInfo(50), '10 is above freezing temperature')
    Test.assertEquals(weatherInfo(23),  '-5 is freezing temperature')
 })
})


function weatherInfo (temp) {
  var c = convertToCelsius(temp)
  if (c > 0)
    return (c + " is above freezing temperature")
  else
    return (c + " is freezing temperature")
}

function convertToCelsius (temperature) {
  var celsius = (temperature - 32) * (5/9)
  return celsius
}
---------------------------------------------------
------ Grasshopper - Debug sayHello ---------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(sayHello('Mr. Spock'), 'Hello, Mr. Spock')
Test.assertEquals(sayHello('Captain Kirk'), 'Hello, Captain Kirk')
Test.assertEquals(sayHello('Liutenant Uhura'), 'Hello, Liutenant Uhura')
Test.assertEquals(sayHello('Dr. McCoy'), 'Hello, Dr. McCoy')
  });
});


function sayHello(name) {
  return 'Hello, ' + name
}
-----------------------------------
--- Remove exclamation marks ------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("test", () => {
    assert.strictEqual(removeExclamationMarks("Hello World!"), "Hello World");
  });
});


function removeExclamationMarks(s) {
  let strResult = "";
  
  for (let i = 0; i < s.length; i++) {
    if (s[i] != "!") strResult += s[i]
  }
  return strResult
}
---------------------------------------------------------------
---Exclamation marks series #1: Remove an exclamation mark from the end of string------------

describe("Basic Tests", function(){
  it("It should works for basic tests", function(){

Test.assertSimilar(remove("Hi!") , "Hi")
Test.assertSimilar(remove("Hi!!!") ,"Hi!!")
Test.assertSimilar(remove("!Hi") , "!Hi")
Test.assertSimilar(remove("!Hi!") , "!Hi")
Test.assertSimilar(remove("Hi! Hi!") , "Hi! Hi")
Test.assertSimilar(remove("Hi") , "Hi")

})})


function remove(s){
  //coding and coding....
  return s[s.length - 1] == "!" ? s.slice(0, s.length - 1) : s  
}
------------------------------------------------------------------
---- Remove all exclamation marks from the end of sentence -------

describe("Basic Tests", function(){
  it("It should works for basic tests", function(){
Test.assertSimilar(remove("Hi!") , "Hi")
Test.assertSimilar(remove("Hi!!!") ,"Hi")
Test.assertSimilar(remove("!Hi") , "!Hi")
Test.assertSimilar(remove("!Hi!") , "!Hi")
Test.assertSimilar(remove("Hi! Hi!") , "Hi! Hi")
Test.assertSimilar(remove("Hi") , "Hi")
})})


function remove(s){
  //coding and coding....
  while (true) {
    if (s[s.length - 1] == "!") {
      s = s.slice(0, s.length - 1)
    } else {
      return s
    }
  }
}
----------------------------------------------------------------------
----- Move all exclamation marks to the end of the sentence ----------

describe("Basic Tests", function(){
  it("It should works for basic tests", function(){

Test.assertSimilar(remove("Hi!") , "Hi!")
Test.assertSimilar(remove("Hi! Hi!") , "Hi Hi!!")
Test.assertSimilar(remove("Hi! Hi! Hi!") , "Hi Hi Hi!!!")
Test.assertSimilar(remove("Hi! !Hi Hi!") , "Hi Hi Hi!!!")
Test.assertSimilar(remove("Hi! Hi!! Hi!") , "Hi Hi Hi!!!!")
})})


function remove(s){
  //coding and coding....
  let strResult = ""
  let strExclamation = ""
  
  for (let i = 0; i < s.length; i++) {
    if (s[i] != "!") { 
      strResult += s[i]
    } else {
      strExclamation += s[i]
    }
    }
  return strResult + strExclamation  
}
------------------------------------------------
---- Is n divisible by x and y? ----------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Fixed Tests", () => {
    assert.strictEqual(isDivisible(3,3,4),false);
    assert.strictEqual(isDivisible(12,3,4),true);
    assert.strictEqual(isDivisible(8,3,4),false);
    assert.strictEqual(isDivisible(48,3,4),true);
  });
});


function isDivisible(n, x, y) {
  return n % x == 0 && n % y == 0 ? true : false
}
---------------------------------------------------
-- Number of Rectangles in a Grid -----------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(numberOfRectangles(4, 4), 100, "");
Test.assertEquals(numberOfRectangles(5, 5), 225, "");
  });
});


function numberOfRectangles(m, n) {
  return n*m*(n+1)*(m+1)/4;
  // Your code here!
}
-----------------------------------------------------
------- You Can't Code Under Pressure #1 ------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(doubleInteger(2), 4);
  });
});


function doubleInteger(i) {
  // i will be an integer. Double it and return it.
  return i * 2;
}
-----------------------------------------------------
----- Convert a string to an array ------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.deepEqual(stringToArray("Robin Singh"), ["Robin", "Singh"]);
    assert.deepEqual(stringToArray("I love arrays they are my favorite"), ["I", "love", "arrays", "they", "are", "my", "favorite"]);
  });
});


function stringToArray(string){

  return string.split(" ")
	// code code code
}
-------------------------------------------
----- Reversed Words ----------------------

describe("reverseWords",function(){
  it("should work for some examples", function(){
    Test.assertEquals(reverseWords("hello world!"), "world! hello")
    Test.assertEquals(reverseWords("yoda doesn't speak like this" ),  "this like speak doesn't yoda")
    Test.assertEquals(reverseWords("foobar"                       ),  "foobar")
    Test.assertEquals(reverseWords("kata editor"                  ),  "editor kata")
    Test.assertEquals(reverseWords("row row row your boat"        ),  "boat your row row row")
  });
});


function reverseWords(str){
  return str.split(" ").reverse().join(" "); // reverse those words
}
-------------------------------------------------------------------
----------- Reversing Words in a String ---------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(reverse('I am an expert at this'), 'this at expert an am I');
    assert.strictEqual(reverse('This is so easy'), 'easy so is This');
    assert.strictEqual(reverse('no one cares'), 'cares one no');
    assert.strictEqual(reverse(''), '');
    assert.strictEqual(reverse('CodeWars'), 'CodeWars');
  })
})


function reverse(string){
  
  arrayStr = string.split(" ").reverse().join(" ")
  
  return arrayStr
  //your code here
}
----------------------------------------------------------------------
-------- Reverse List Order ------------------------------------------

describe("reverseList", function(){
  it("should reverse some sample arrays", function(){
    Test.assertSimilar(reverseList([1,2,3,4]), [4,3,2,1]);
    Test.assertSimilar(reverseList([3,1,5,4]), [4,5,1,3]);
  });
});


function reverseList(list) {
   return list.reverse()
}
