----------------------------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("Fixed Tests", () => {
    assert.strictEqual(removeChar('eloquent'), 'loquen');
    assert.strictEqual(removeChar('country'), 'ountr');
    assert.strictEqual(removeChar('person'), 'erso');
    assert.strictEqual(removeChar('place'), 'lac');
    assert.strictEqual(removeChar('ooopsss'), 'oopss');
  });
});


function removeChar(str){
 //You got this!
  const strLength = str.length;
 return str.slice (1, strLength - 1)
};

-----------------------------------------------
---------USD => CNY---------------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Basic tests", () => {
  it("Testing for fixed tests", () => {
    assert.strictEqual(usdcny(15), '101.25 Chinese Yuan');
    assert.strictEqual(usdcny(465), '3138.75 Chinese Yuan');
  });
});


function usdcny(usd) {
   return (usd * 6.75).toFixed(2) + " Chinese Yuan"
}

-------------------------------------------------
-------- Reversed sequence ----------------------

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("reverseSeq", function() {
  it("Sample Test", function() {
    assert.deepEqual(reverseSeq(5), [5, 4, 3, 2, 1]);
  });
});


const reverseSeq = n => {
  let resultArray = [];
  for (let i=1; i <= n; i++) {
    resultArray.unshift(i)
  }
  return resultArray;
};
-----------------------------------------------
-------------Double Char-----------------------

describe("doubleChar", function() {
  it("works for some examples", function() {
    Test.assertEquals(doubleChar("abcd"), "aabbccdd");
    Test.assertEquals(doubleChar("Adidas"), "AAddiiddaass");
    Test.assertEquals(doubleChar("1337"), "11333377");
    Test.assertEquals(doubleChar("illuminati"), "iilllluummiinnaattii");
    Test.assertEquals(doubleChar("123456"), "112233445566");
    Test.assertEquals(doubleChar("%^&*("), "%%^^&&**((");
  });
});

function doubleChar(str) {
  const strLength = str.length;
  let strResult = "";
  
  for (let i = 0; i <= strLength; i++) {
     strResult += str.substr(i, 1);
     strResult += str.substr(i, 1);
  }
  return strResult;
  // Your code here
}
---------------------------------------
-----Even or Odd-----------------------

const chai = require('chai');
const assert = chai.assert;

describe("Sample tests",() => {
  
  it("2 is even", () => {
    assert.strictEqual(even_or_odd(2), "Even");
  });
  it("7 is odd", () => {
    assert.strictEqual(even_or_odd(7), "Odd");
  });
  it("-42 is even", () => {
    assert.strictEqual(even_or_odd(-42), "Even");
  });
  it("-7 is odd", () => {
    assert.strictEqual(even_or_odd(-7), "Odd");
  });
  it("0 is even", () => {
    assert.strictEqual(even_or_odd(0), "Even");
  });
});

function even_or_odd(number) {
  return number % 2 == 0 ? "Even" : "Odd"
}
--------------------------------------------
------------- Third Angle of a Triangle-----

const chai = require("chai");
const assert = chai.assert;
chai.config.truncateThreshold=0;

describe("Tests", () => {
  it("test", () => {
    assert.strictEqual(otherAngle(30, 60), 90);
    assert.strictEqual(otherAngle(60, 60), 60);
    assert.strictEqual(otherAngle(43, 78), 59);
    assert.strictEqual(otherAngle(10, 20), 150);
  });
});


function otherAngle(a, b) {
  return 180 - a - b;
}
------------------------------------------------
-----------Area of a Square---------------------

describe("squareArea(2)", function() {
  Test.assertEquals(squareArea(2), 1.62);
});

describe("squareArea(0)", function() {
  Test.assertEquals(squareArea(0), 0);
});

describe("squareArea(14.05)", function() {
  Test.assertEquals(squareArea(14.05), 80);
});


function squareArea(A){
  return +Math.pow(((4 * A) / (2 * Math.PI)),2).toFixed(2)
}
--------------------------------------------------
-----------------What's the real floor?-----------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(getRealFloor(1), 0);
Test.assertEquals(getRealFloor(5), 4);
Test.assertEquals(getRealFloor(15), 13);
  });
});

function getRealFloor(n) {
  if (n <= 0) n;
  if (n > 0 && n <= 12) n -= 1;
  if (n > 12) n -=2;
  
  return n;
}
-----------------------------------------
-------- Is it even? --------------------

describe("Tests", () => {
  it("test", () => {
Test.assertEquals(testEven(0), true, "testEven for 0");
Test.assertEquals(testEven(0.5), false, "testEven for 0.5");
Test.assertEquals(testEven(1), false, "testEven for 1");
Test.assertEquals(testEven(2), true, "testEven for 2");
Test.assertEquals(testEven(-4), true, "testEven for 2");
  });
});

function testEven(n) {
  
  return n % 2 == 0 ? true : false
    //Your awesome code here!
}
